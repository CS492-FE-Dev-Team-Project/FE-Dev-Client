{"version":3,"sources":["types/index.ts","assets/naver_login_eng.png","context/user/userContext.tsx","assets/logo1.svg","components/loginModal.tsx","context/socket/socketContext.tsx","context/socket/hooks.tsx","context/socket/socketProvider.tsx","context/lecture/lectureContext.tsx","components/leftmenu/leftmenubutton.tsx","components/leftmenu/leftmenutab.tsx","context/language/languageContext.tsx","components/leftmenu/leftmenu.tsx","data/leftmenuData.ts","components/floatConnectionStatus.tsx","components/common/Icon.tsx","components/common/Button.tsx","components/lecturecarousel/lecturecard.tsx","components/lecturecarousel/lecturecarousel.tsx","components/youtube.tsx","pages/classPage.tsx","components/timeMarker.tsx","components/chat.tsx","components/chatMessage.tsx","components/common/icons.tsx","hooks/useParsedClassLectureId.tsx","components/audioRecorder.tsx","components/chatInput.tsx","components/common/Header.tsx","hooks/useMe.tsx","components/common/playlist.ts","components/lobbyPage/classAddModal.tsx","pages/lecturePage.tsx","components/lobbyPage/classAddModalContents.tsx","components/lobbyPage/lobbyContent.tsx","components/lobbyPage/classCard.tsx","hooks/useClasses.tsx","assets/logo2.svg","pages/lobbyPage.tsx","components/classroomPage/createLecture/lectureTitle.tsx","components/classroomPage/createLecture/lectureNotice.tsx","components/classroomPage/createLecture/lectureTime.tsx","components/classroomPage/createLecture/addPlaylist.tsx","components/classroomPage/createLecture/addQuizModal.tsx","components/classroomPage/AddLecturePage.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","context/user/userProvider.tsx","context/lecture/lectureProvider.tsx","context/language/languageProvider.tsx","index.tsx"],"names":["MemberType","UserLoadStatus","MarkerType","LanguageType","TabType","UserContext","createContext","userName","status","LOADED","id","NaverLoginButton","props","w","h","colorScheme","src","NaverLoginButtonAsset","fit","LoginModal","useContext","size","isOpen","onClose","console","log","LOADING","LogoAsset","alt","textAlign","fontSize","fontWeight","display","onClick","window","location","pathname","SocketContext","getSocket","getConnected","getError","subscribeEvent","getEventMsg","useSocket","socket","connected","error","SocketProvider","url","children","options","debug","useState","setSocket","setConnected","setError","eventMsgRecord","setEventMsgRecord","useEffect","newSocket","io","on","removeAllListeners","err","onAny","event","any","disconnect","Provider","value","msg","setEventMsg","defaultProps","lectureContext","isLive","setIsLive","selectedVidIdx","setSelectedVidIdx","LeftMenuButton","entry","useParams","memberType","classUuid","lectureId","LectureContext","shouldHighlight","type","VIDEO","videoIdx","as","height","lineHeight","transition","border","px","borderRadius","bg","borderColor","color","_hover","_active","transform","_focus","boxShadow","USER","alert","userId","STUDENT","INSTRUCTOR","onClickHandler","NOTICE","message","overflow","whiteSpace","style","scrollbarWidth","tabName","LeftMenuTab","tabTitle","tabContents","spacing","letterSpacing","justifyContent","ml","mt","map","tab","langContext","language","KO","setLanguage","GlobeIcon","createIcon","displayName","path","xmlns","width","viewBox","d","LeftMenu","menus","LangContext","navigate","useNavigate","flexDir","overflowX","overflowY","divider","align","menu","p","backgroundColor","bottom","icon","m","placement","marginRight","EN","deafultEntries","FloatConnectionStatus","position","left","zIndex","alignContent","opacity","FlagIcon","className","version","x","y","xmlSpace","ClipboardButton","leftIcon","CreateMarkerButtons","QUESTION","DISCUSSION","breakpoints","createBreakpoints","sm","md","lg","xl","LectureCard","extendTheme","lectureNum","youtubeID","date","to","key","rounded","bgColor","flexDirection","ratio","useColorModeValue","base","fontFamily","SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","VideoState","LectureCarousel","lectureList","centeredSlides","spaceBetween","slidesPerView","navigation","pagination","clickable","renderBullet","index","lectureDate","LiveStatus","lectureName","slice","ClassPage","setLectureList","useClipboard","onCopy","hasCopied","toast","useToast","noticeTabSegment","defaultNoticeTabEntries","memberArr","setMemberArr","memberTabSegment","payload","JSON","stringify","emit","response","lecture","lecList","members","newMemList","mem","lectures","title","duration","isClosable","FlagSVG","fill","stroke","strokeWidth","TimeMarker","time","markerType","videoIndex","markerId","onClickEvt","markerT","Error","colorPick","ChatMode","YouTubePlayer","videoId","isControled","video","setVideo","videoCurrent","setVideoCurrent","videoDuration","useRef","intervalID","videoWrapper","videoTimelineWrapper","markers","setMarkers","current","classList","add","cover","remove","uncover","newtime","seekTo","playVideo","pauseVideo","responseMarkers","marker","markerArr","clearInterval","off","toString","playerVars","autoplay","controls","disablekb","rel","coverStyles","backgroundImage","backgroundSize","ref","curTime","getCurrentTime","opts","onReady","evt","target","onPlay","playerInfo","setInterval","onPause","onStateChange","player","JO","data","BUFFERING","PLAYING","PAUSED","Message","maxWidth","marginBottom","Time","marginTop","Username","mb","ChatMessage","isMy","CircleIcon","useParsedClassLectureIds","parseInt","AudioRecorder","audioStream","setAudioStream","media","setMedia","onRec","setOnRec","source","setSource","audioAnalyser","setAudioAnalyser","audioUrl","setAudioUrl","arrayBuffer","blob","senderId","Blob","Uint8Array","URL","createObjectURL","Audio","play","onSubmitAudioFile","useCallback","sound","File","lastModified","Date","getTime","audioCtx","AudioContext","analyser","createScriptProcessor","navigator","mediaDevices","getUserMedia","audio","then","stream","mediaRecorder","MediaRecorder","start","createMediaStreamSource","connect","destination","makeSound","onaudioprocess","e","playbackTime","getAudioTracks","forEach","track","stop","ondataavailable","blobEvent","ChatInput","sendMessage","setMessage","document","addEventListener","keydownEvents","removeEventListener","shiftKey","code","preventDefault","placeholder","rows","resize","onChange","Header","headingSize","headingText","justify","useMe","Chat","hasHeader","customHeader","messages","setMessages","chatStatus","chatMode","Live","currentMarkerId","myId","header","chatStat","Marker","Individual","peer","name","pickHeader","createNewMessageObj","messageResponse","dateStr","senderName","text","messageId","dateObj","getHours","getMinutes","textMessages","arr","retrievedMessages","savedMessage","marginLeft","pb","pt","trim","length","markerTextMessage","createMessage","dotenv","ClassAddModalState","getPlayListItems","playlistID","a","axios","get","params","part","maxResults","playlistId","process","result","LecturePage","setLecture","EMPTY_HANDLER","videoArr","setVideoArr","videoTabSegment","noticeArr","setNoticeArr","parsedLectureId","toggleLiveButton","notifyLiveButton","videoList","playlist","items","element","idx","push","snippet","link","resourceId","selectedVideoIdx","user","lec","newUser","liveStatus","initContent","setModalState","JOIN","CREATE","joinContent","onChangejoinUUID","handleJoin","onModalClose","mr","createContent","onChangeTitle","onChangeSubtitle","handleCreate","AddClassModal","addClass","React","INIT","modalState","setTitle","subtitle","setSubtitle","joinClassUUID","setJoinUUID","alignItems","fetch","method","headers","body","uuid","r","json","j","class","catch","LobbyContent","col","gridTemplateRows","gridTemplateColumns","ClassCard","imgSrc","subTitle","classColor","stc","regexColor","exec","isDark","cursor","direction","pl","useClasses","classes","setClasses","newClass","classArr","LobbyPage","useBreakpointValue","useDisclosure","onOpen","filter","right","LectureTitle","onChangeLecturetitle","focusBorderColor","LectureNotice","onChangeLectureNotice","LectureTime","setLectureDate","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","AddPlayList","onChangeLecturePlaylist","Lecturelink","setLecturequizlist","Youtubelist","quiztime","problem","answer","newquiz","mark","AddQuizModal","isAddopen","onAddopen","onAddclose","onChangeLectureproblem","onChangeLectureanswer","onChangeLecturequiztime","Lectureproblem","Lectureanswer","Lecturequiztime","setQurrentnumber","Lecturequizlist","Qurrentnumber","tempquizlist","AddLecturePage","lectureTitle","setLectureTitle","setLectureNotice","lecturePlaylist","setLecturePlaylist","setLecturequiztime","setLectureproblem","setLectureanswer","Lecturequizhead","onClickRemove","removequiz","i","showQuiz","item","variant","showQuizhead","App","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","UserProvider","setUserName","setUserStatus","setId","NOTLOADED","langProvider","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b48d2da7.chunk.js","sourcesContent":["export interface Class {\n  uuid: string;\n  title: string;\n  subtitle: string;\n  memberType: MemberType;\n}\n\nexport interface Lecture {\n  id: number;\n  lectureDate: string;\n  lectureName: string;\n  playlist: string;\n  LiveStatus: boolean;\n}\n\nexport interface Member {\n  id: number;\n  userName: string;\n  memberType: MemberType;\n  language: string;\n}\n\nexport enum MemberType {\n  INSTRUCTOR = 'instructor',\n  STUDENT = 'student'\n}\n\nexport enum UserLoadStatus {\n  LOADED,\n  LOADING,\n  NOTLOADED\n}\n\nexport enum MarkerType {\n  QUESTION = 'Question',\n  DISCUSSION = 'Discussion'\n}\n\nexport interface MessageResponse {\n  messageId: number;\n  senderId: number;\n  senderName: string;\n  dateStr: string;\n}\n\nexport interface TextMessageResponse extends MessageResponse {\n  text: string;\n}\n\nexport interface AudioMessageResponse extends MessageResponse {\n  url: string;\n}\n\nexport interface Marker {\n  id: number;\n  markerType: MarkerType;\n  time: number;\n  videoIndex: number;\n  messages: MessageResponse[];\n}\n\nexport enum LanguageType {\n  EN,\n  KO\n}\n\n// LeftMenu tabs\nexport enum TabType {\n  USER = 'user',\n  VIDEO = 'video',\n  NOTICE = 'notice'\n}\n\ninterface BaseTabEntry {\n  tabName: string;\n  type: TabType;\n  onClickHandler?: (...args: any[]) => void;\n}\n\nexport interface UserTabEntry extends BaseTabEntry {\n  userId: number;\n}\n\nexport interface VideoTabEntry extends BaseTabEntry {\n  videoIdx: number;\n  link: string;\n}\n\nexport interface NoticeTabEntry extends BaseTabEntry {\n  message: string;\n}\n\nexport type TabEntry = UserTabEntry | VideoTabEntry | NoticeTabEntry;\n\nexport interface TabSegment {\n  tabTitle: string;\n  tabContents: TabEntry[];\n}\n","export default __webpack_public_path__ + \"static/media/naver_login_eng.69b5671c.png\";","import { createContext } from 'react';\nimport { UserLoadStatus } from '../../types';\n\ninterface UserContextInterface {\n  userName: string;\n  status: UserLoadStatus;\n  id: number;\n}\n\nconst UserContext = createContext<UserContextInterface>({\n  userName: '',\n  status: UserLoadStatus.LOADED,\n  id: -1\n});\n\nexport default UserContext;\n","export default __webpack_public_path__ + \"static/media/logo1.23d60d6d.svg\";","import React, { useContext } from 'react';\nimport {\n  Box,\n  Flex,\n  VStack,\n  Spacer,\n  Modal,\n  ModalBody,\n  ModalContent,\n  Button,\n  Image,\n  ModalOverlay,\n  ModalHeader,\n  Spinner\n} from '@chakra-ui/react';\n\nimport NaverLoginButtonAsset from '../assets/naver_login_eng.png';\nimport UserContext from '../context/user/userContext';\nimport { UserLoadStatus } from '../types';\nimport LogoAsset from '../assets/logo1.svg';\n\nconst NaverLoginButton = ({ ...props }) => {\n  return (\n    <Button w={460} h={100} colorScheme=\"white\" {...props}>\n      <Image src={NaverLoginButtonAsset} fit=\"fill\" />\n    </Button>\n  );\n};\n\nconst LoginModal = () => {\n  const { status } = useContext(UserContext);\n\n  return (\n    <Modal\n      size=\"xl\"\n      isOpen={status !== UserLoadStatus.LOADED}\n      onClose={() => {\n        console.log();\n      }}\n    >\n      <ModalOverlay />\n      {status === UserLoadStatus.LOADING ? (\n        <Spinner />\n      ) : (\n        <ModalContent>\n          <ModalHeader>\n            <VStack w=\"100%\">\n              <Flex w=\"100%\" h=\"60px\">\n                <Spacer />\n                <Image src={LogoAsset} alt=\"liveclass\" h=\"60px\" />\n                <Spacer />\n              </Flex>\n              <Box\n                w=\"100%\"\n                textAlign=\"center\"\n                fontSize=\"50px\"\n                fontWeight=\"bold\"\n              >\n                LOG IN\n              </Box>\n            </VStack>\n          </ModalHeader>\n          <ModalBody>\n            <Flex>\n              <Box w=\"100%\" display=\"flex\">\n                <Spacer />\n                <NaverLoginButton\n                  onClick={() => {\n                    window.location.pathname = '/api/auth/naver';\n                  }}\n                />\n                <Spacer />\n              </Box>\n            </Flex>\n          </ModalBody>\n        </ModalContent>\n      )}\n    </Modal>\n  );\n};\n\nexport default LoginModal;\n","import { createContext } from 'react';\nimport { SocketContextInterface } from './types';\n\nconst SocketContext = createContext<SocketContextInterface>({\n  getSocket: () => null,\n  getConnected: () => false,\n  getError: () => undefined,\n  subscribeEvent: () => undefined,\n  getEventMsg: () => ''\n});\n\nexport default SocketContext;\n","import { useContext, useEffect } from 'react';\nimport SocketContext from './socketContext';\n\nconst useSocket = () => {\n  const { getSocket, getConnected, getError } = useContext(SocketContext);\n\n  const socket = getSocket();\n  const connected = getConnected();\n  const error = getError();\n\n  return { socket, connected, error };\n};\n\nconst useSocketEvent = (event: string) => {\n  const { subscribeEvent, getEventMsg, getSocket, getConnected } =\n    useContext(SocketContext);\n\n  useEffect(() => {\n    subscribeEvent(event);\n  });\n\n  const msg = getEventMsg(event);\n  const sendMsg = (msgToSend: string) => {\n    getSocket()?.emit(event, msgToSend);\n  };\n  const connected = getConnected();\n\n  return { msg, sendMsg, connected };\n};\n\nexport { useSocket, useSocketEvent };\n","import React, { useEffect, useState } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport SocketContext from './socketContext';\nimport { SocketOptionType } from './types';\n\nSocketProvider.defaultProps = {\n  options: null\n};\n\nfunction SocketProvider({\n  url,\n  children,\n  options,\n  debug = true\n}: {\n  url: string;\n  children: any;\n  options?: SocketOptionType;\n  debug?: boolean;\n}) {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [connected, setConnected] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [eventMsgRecord, setEventMsgRecord] = useState<Record<string, string>>(\n    {}\n  );\n\n  useEffect(() => {\n    const newSocket: Socket = io(url, options);\n    setSocket(newSocket);\n\n    newSocket.on('connect', () => {\n      setConnected(true);\n    });\n\n    newSocket.on('disconnect', () => {\n      newSocket.removeAllListeners();\n      setConnected(false);\n    });\n\n    newSocket.on('error', err => {\n      setError(err);\n    });\n\n    if (debug) {\n      newSocket.onAny((event, ...any) => {\n        console.log(event, any);\n      });\n    }\n\n    return () => {\n      setSocket(null);\n      newSocket.disconnect();\n    };\n  }, [url, options]);\n\n  const getSocket = () => socket;\n  const getConnected = () => connected;\n  const getError = () => error;\n\n  const setEventMsg = (event: string, msg: string) => {\n    setEventMsgRecord({ ...eventMsgRecord, [event]: msg });\n  };\n  const subscribeEvent = (event: string) => {\n    socket?.on(event, (msg: string) => {\n      setEventMsg(event, msg);\n    });\n  };\n  const getEventMsg = (event: string) => eventMsgRecord[event];\n\n  return (\n    <SocketContext.Provider\n      value={{\n        getSocket,\n        getConnected,\n        getError,\n        subscribeEvent,\n        getEventMsg\n      }}\n    >\n      {children}\n    </SocketContext.Provider>\n  );\n}\n\nexport default SocketProvider;\n","import { createContext } from 'react';\n\ninterface langContextInterface {\n  isLive: boolean;\n  setIsLive: (status: boolean) => void;\n  selectedVidIdx: number;\n  setSelectedVidIdx: (idx: number) => void;\n}\n\nconst lectureContext = createContext<langContextInterface>({\n  isLive: false,\n  setIsLive: () => null,\n  selectedVidIdx: 0,\n  setSelectedVidIdx: () => null\n});\n\nexport default lectureContext;\n","import React, { useContext } from 'react';\nimport { useParams } from 'react-router';\nimport { Box } from '@chakra-ui/react';\n\nimport { MemberType, TabType } from '../../types';\n\nimport LectureContext from '../../context/lecture/lectureContext';\n\nconst LeftMenuButton = ({ entry }: any) => {\n  const { classUuid, memberType, lectureId } = useParams();\n  const { isLive, selectedVidIdx, setSelectedVidIdx } =\n    useContext(LectureContext);\n\n  let shouldHighlight = false;\n  if (entry.type === TabType.VIDEO)\n    shouldHighlight = entry.videoIdx === selectedVidIdx;\n\n  const eventHandler = () => {\n    switch (entry.type) {\n      case TabType.USER:\n        alert(entry.userId);\n        break;\n      case TabType.VIDEO:\n        if (memberType === MemberType.STUDENT && isLive) return;\n        setSelectedVidIdx(entry.videoIdx);\n        if (memberType === MemberType.INSTRUCTOR && isLive) {\n          entry.onClickHandler(); // socket?.emit('SelectVideo', ...) - control others' video\n        }\n        break;\n      case TabType.NOTICE:\n        if (entry.onClickHandler) entry.onClickHandler();\n        else alert(entry.message);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Box\n      as=\"button\"\n      height=\"30px\"\n      lineHeight=\"1.1\"\n      transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n      border=\"1px\"\n      px=\"8px\"\n      borderRadius=\"2px\"\n      fontSize=\"20px\"\n      textAlign=\"start\"\n      bg=\"white\"\n      borderColor={shouldHighlight ? '#FF4A3E' : 'white'}\n      color=\"black\"\n      _hover={{ bg: '#ebedf0' }}\n      _active={{\n        bg: '#dddfe2',\n        transform: 'scale(0.98)',\n        borderColor: '#bec3c9'\n      }}\n      _focus={{\n        boxShadow:\n          '0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)'\n      }}\n      onClick={eventHandler}\n      overflow=\"scroll\"\n      whiteSpace=\"nowrap\"\n      style={{ scrollbarWidth: 'none' }}\n    >\n      {entry.tabName}\n    </Box>\n  );\n};\n\nexport default LeftMenuButton;\n","import React from 'react';\nimport { Stack, Box, Button } from '@chakra-ui/react';\nimport { TabSegment, TabEntry } from '../../types';\nimport LeftMenuButton from './leftmenubutton';\n\nconst LeftMenuTab = ({ tabTitle, tabContents }: TabSegment) => {\n  return (\n    <Box w=\"175px\">\n      <Stack spacing={0}>\n        <Box\n          letterSpacing=\"wide\"\n          justifyContent=\"flex-start\"\n          fontWeight=\"bold\"\n          fontSize=\"18px\"\n          ml=\"2\"\n          mt=\"2\"\n        >\n          {tabTitle}\n        </Box>\n        <Box w=\"100%\" h=\"3px\" />\n        {tabContents.map((tab: TabEntry) => {\n          return (\n            <>\n              <LeftMenuButton entry={tab} />\n              <Box w=\"100%\" h=\"3px\" />\n            </>\n          );\n        })}\n      </Stack>\n    </Box>\n  );\n};\n\nexport default LeftMenuTab;\n","import { createContext } from 'react';\nimport { LanguageType } from '../../types';\n\ninterface langContextInterface {\n  language: LanguageType;\n  setLanguage: (language: LanguageType) => void;\n}\n\nconst langContext = createContext<langContextInterface>({\n  language: LanguageType.KO,\n  setLanguage: () => null\n});\n\nexport default langContext;\n","import React, { useContext } from 'react';\nimport {\n  ChevronRightIcon,\n  CloseIcon,\n  SettingsIcon,\n  createIcon\n} from '@chakra-ui/icons';\nimport {\n  Box,\n  Button,\n  Flex,\n  StackDivider,\n  VStack,\n  IconButton,\n  Portal,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverArrow,\n  Spacer\n} from '@chakra-ui/react';\n\nimport { useNavigate } from 'react-router-dom';\nimport { LanguageType, TabSegment } from '../../types';\nimport LeftMenuTab from './leftmenutab';\nimport Header from '../common/Header';\nimport LangContext from '../../context/language/languageContext';\n\ninterface LeftMenuProps {\n  menus: TabSegment[];\n}\n\nconst GlobeIcon = createIcon({\n  displayName: 'GlobeIcon',\n  path: (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M24 24h-2.784l-1.07-3h-4.875l-1.077 3h-2.697l4.941-13h2.604l4.958 13zm-4.573-5.069l-1.705-4.903-1.712 4.903h3.417zm-9.252-12.804c.126-.486.201-.852.271-1.212l-2.199-.428c-.036.185-.102.533-.22 1-.742-.109-1.532-.122-2.332-.041.019-.537.052-1.063.098-1.569h2.456v-2.083h-2.161c.106-.531.198-.849.288-1.149l-2.147-.645c-.158.526-.29 1.042-.422 1.794h-2.451v2.083h2.184c-.058.673-.093 1.371-.103 2.077-2.413.886-3.437 2.575-3.437 4.107 0 1.809 1.427 3.399 3.684 3.194 2.802-.255 4.673-2.371 5.77-4.974 1.134.654 1.608 1.753 1.181 2.771-.396.941-1.561 1.838-3.785 1.792v2.242c2.469.038 4.898-.899 5.85-3.166.93-2.214-.132-4.635-2.525-5.793zm-2.892 1.531c-.349.774-.809 1.544-1.395 2.15-.09-.646-.151-1.353-.184-2.108.533-.07 1.072-.083 1.579-.042zm-3.788.724c.062.947.169 1.818.317 2.596-1.996.365-2.076-1.603-.317-2.596zm11.236-1.745l-2.075-5.533 5.414-1.104-.976 1.868c2.999 2.418 4.116 5.645 4.532 8.132-1.736-2.913-3.826-4.478-5.885-5.321l-1.01 1.958zm-7.895 10.781l1.985 5.566-5.43 1.016 1.006-1.852c-2.96-2.465-4.021-5.654-4.397-8.148 1.689 2.94 3.749 4.483 5.794 5.36l1.042-1.942zm10.795-6.029\" />\n    </svg>\n  )\n});\n\nconst LeftMenu = ({ menus }: LeftMenuProps) => {\n  const { language, setLanguage } = useContext(LangContext);\n  const navigate = useNavigate();\n\n  return (\n    <Flex w=\"190px\" h=\"100vh\" flexDir=\"column\">\n      <Flex overflowX=\"hidden\" overflowY=\"auto\" flexDir=\"column\">\n        <Box ml=\"2\">\n          <VStack\n            divider={<StackDivider borderColor=\"gray.200\" />}\n            spacing={0}\n            w=\"190px\"\n            align=\"stretch\"\n          >\n            {menus.map((menu: TabSegment) => (\n              <LeftMenuTab\n                tabTitle={menu.tabTitle}\n                tabContents={menu.tabContents}\n              />\n            ))}\n          </VStack>\n        </Box>\n      </Flex>\n      <Spacer />\n      <Flex p=\"10px 10px\" w=\"full\" backgroundColor=\"white\" flexDir=\"column\">\n        <Box bottom={0}>\n          <Popover>\n            <PopoverTrigger>\n              <IconButton\n                size=\"md\"\n                colorScheme=\"red\"\n                icon={<CloseIcon />}\n                aria-label=\"Quit\"\n                m={0.5}\n              />\n            </PopoverTrigger>\n            <PopoverContent w={180}>\n              <PopoverArrow />\n              <PopoverBody>\n                <Button colorScheme=\"red\" w={150} onClick={() => navigate(-1)}>\n                  Quit room\n                </Button>\n              </PopoverBody>\n            </PopoverContent>\n          </Popover>\n          <IconButton\n            size=\"md\"\n            icon={<SettingsIcon />}\n            aria-label=\"Settings\"\n            m={0.5}\n          />\n          <Popover placement=\"top-start\">\n            {({ onClose }) => (\n              <>\n                <PopoverTrigger>\n                  <IconButton\n                    size=\"sm\"\n                    icon={<GlobeIcon />}\n                    aria-label=\"Settings\"\n                    m={0.5}\n                  />\n                </PopoverTrigger>\n                <Portal>\n                  <PopoverContent w=\"165px\" h=\"60px\">\n                    <PopoverBody>\n                      <Button\n                        colorScheme=\"green\"\n                        marginRight=\"2px\"\n                        onClick={() => {\n                          setLanguage(LanguageType.EN);\n                          onClose();\n                        }}\n                      >\n                        EN\n                      </Button>\n                      <Button\n                        colorScheme=\"blue\"\n                        onClick={() => {\n                          setLanguage(LanguageType.KO);\n                          onClose();\n                        }}\n                      >\n                        한글\n                      </Button>\n                      <PopoverCloseButton />\n                    </PopoverBody>\n                  </PopoverContent>\n                </Portal>\n              </>\n            )}\n          </Popover>\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default LeftMenu;\n","import { TabType, NoticeTabEntry } from '../types';\n\nconst deafultEntries: NoticeTabEntry[] = [\n  {\n    tabName: 'Notice',\n    type: TabType.NOTICE,\n    message: 'Notice message'\n  },\n  {\n    tabName: 'Materials',\n    type: TabType.NOTICE,\n    message: 'Materials message'\n  }\n];\n\nexport default deafultEntries;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, Text, Button } from '@chakra-ui/react';\nimport { useParams } from 'react-router';\nimport { useSocket } from '../context/socket';\n\n// import useClasses from '../hooks/useClasses';\n// import UserContext from '../context/user/userContext';\n\nconst FloatConnectionStatus = () => {\n  const { connected } = useSocket();\n  return (\n    <Flex\n      position=\"fixed\"\n      left={5}\n      bottom={10}\n      zIndex={3}\n      w=\"300px\"\n      h=\"200px\"\n      backgroundColor=\"gray.300\"\n      justifyContent=\"center\"\n      alignContent=\"center\"\n      borderRadius=\"30px\"\n      opacity=\"0.8\"\n      color={connected ? 'blue.500' : 'red.500'}\n    >\n      <Text height=\"fit-content\" fontSize=\"2xl\">{`Connected: ${\n        connected ? 'True' : 'False'\n      }`}</Text>\n    </Flex>\n  );\n};\n\nexport default FloatConnectionStatus;\n","import React from 'react';\nimport { createIcon } from '@chakra-ui/react';\n\nexport const FlagIcon = createIcon({\n  displayName: 'flagIcon',\n  path: (\n    <svg\n      className=\"flagIcon\"\n      version=\"1.1\"\n      id=\"Capa_1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      x=\"0px\"\n      y=\"0px\"\n      viewBox=\"0 0 206.505 206.505\"\n      xmlSpace=\"preserve\"\n    >\n      <g>\n        <path\n          d=\"M167.069,16.354c-0.426,0.186-43.29,18.671-70.274-4.481c-31.021-26.619-60.722-0.2-61.012,0.072\n          L34.623,13l-0.179,193.494l7.108,0.011l0.115-122.594c5.157-4.091,27.11-19.086,50.498,0.988\n          c30.356,26.047,75.839,6.438,77.765,5.59l2.133-0.938V14.153L167.069,16.354z M164.943,84.824\n          c-8.997,3.389-44.603,14.874-68.148-5.322c-10.375-8.904-20.6-11.871-29.629-11.871c-10.815,0-19.923,4.266-25.489,7.702\n          l0.047-59.101c5.264-4.169,27.142-18.961,50.44,1.034c24.855,21.323,59.863,12.043,72.78,7.516V84.824z\"\n        />\n      </g>\n    </svg>\n  )\n});\n","import React from 'react';\nimport { Button, Box } from '@chakra-ui/react';\nimport { CopyIcon } from '@chakra-ui/icons';\nimport { MarkerType } from '../../types';\nimport { FlagIcon } from './Icon';\n\ninterface ButtonProps {\n  onClick: (arg?: any | void) => void;\n}\n\nconst ClipboardButton = ({\n  children,\n  onClick\n}: React.PropsWithChildren<ButtonProps>) => (\n  <Button\n    className=\"ClipboardButton\"\n    leftIcon={<CopyIcon />}\n    aria-label=\"Settings\"\n    m={0.5}\n    onClick={onClick}\n  >\n    {children}\n  </Button>\n);\n\nconst FlagButton = ({\n  children,\n  onClick\n}: React.PropsWithChildren<ButtonProps>) => (\n  <Button\n    className=\"flagButton\"\n    leftIcon={<FlagIcon />}\n    aria-label=\"Settings\"\n    m={0.5}\n    onClick={onClick}\n  >\n    {children}\n  </Button>\n);\n\nconst CreateMarkerButtons: React.FC<ButtonProps> = ({ onClick }) => (\n  <Box className=\"create-timeline-marker\">\n    <Button\n      colorScheme=\"red\"\n      leftIcon={<FlagIcon />}\n      marginRight=\"2px\"\n      onClick={() => onClick(MarkerType.QUESTION)}\n    >\n      Question\n    </Button>\n    <Button\n      colorScheme=\"blue\"\n      leftIcon={<FlagIcon />}\n      onClick={() => onClick(MarkerType.DISCUSSION)}\n    >\n      Discussion\n    </Button>\n  </Box>\n);\n\nexport { FlagButton, ClipboardButton, CreateMarkerButtons };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Box,\n  Flex,\n  Spacer,\n  Text,\n  Button,\n  Image,\n  AspectRatio,\n  Heading,\n  useColorModeValue,\n  extendTheme\n} from '@chakra-ui/react';\nimport { createBreakpoints } from '@chakra-ui/theme-tools';\n\nconst breakpoints = createBreakpoints({\n  sm: '320px',\n  md: '768px',\n  lg: '960px',\n  xl: '1200px',\n  '2xl': '1536px'\n});\nconst theme = extendTheme({ breakpoints });\n\nconst LectureCard = ({ lectureNum, youtubeID, isLive, date, to, key }: any) => {\n  return (\n    <Box\n      w=\"100%\"\n      h=\"60vh\"\n      rounded=\"md\"\n      boxShadow=\"md\"\n      bgColor={isLive ? 'red.200' : 'white'}\n      borderColor={isLive ? 'red' : 'black'}\n      overflow=\"hidden\"\n    >\n      <Flex h=\"100%\" flexDirection=\"column\">\n        <AspectRatio ratio={16 / 9}>\n          <Image\n            src={`https://img.youtube.com/vi/${youtubeID}/hqdefault.jpg`}\n            fit=\"cover\"\n            h=\"40%\"\n          />\n        </AspectRatio>\n        <Flex\n          h=\"100%\"\n          flexDirection=\"column\"\n          textAlign=\"center\"\n          p={6}\n          color={useColorModeValue('gray.800', 'white')}\n          align=\"center\"\n        >\n          {isLive ? (\n            <Text\n              fontSize=\"lg\"\n              fontWeight=\"bold\"\n              bg=\"red.100\"\n              p={2}\n              px={3}\n              color=\"red\"\n              rounded=\"full\"\n            >\n              Live\n            </Text>\n          ) : (\n            <Text\n              fontSize=\"lg\"\n              fontWeight=\"bold\"\n              bg=\"green.100\"\n              p={2}\n              px={3}\n              color=\"green.500\"\n              rounded=\"full\"\n            >\n              {`${date}`}\n            </Text>\n          )}\n          <Spacer />\n          <Box>\n            <Heading\n              color={useColorModeValue('gray.700', 'white')}\n              fontSize={{\n                base: '12px',\n                md: '20px',\n                lg: '26px',\n                xl: '30px',\n                '2xl': '42px'\n              }}\n              fontFamily=\"body\"\n            >\n              {`Lecture ${lectureNum}`}\n            </Heading>\n          </Box>\n          <Spacer />\n          <Link to={to} key={key}>\n            <Button\n              w=\"100%\"\n              h=\"40px\"\n              bg=\"green.400\"\n              color=\"white\"\n              fontSize=\"15px\"\n              rounded=\"xl\"\n              boxShadow=\"0 5px 20px 0px rgb(72 187 120 / 43%)\"\n              _hover={{\n                bg: 'green.500'\n              }}\n              _focus={{\n                bg: 'green.500'\n              }}\n            >\n              Go To Lecture\n            </Button>\n          </Link>\n          <Box h=\"30px\" />\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default LectureCard;\n","import React, { useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper';\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\nimport 'swiper/components/pagination/pagination.scss';\nimport 'swiper/components/scrollbar/scrollbar.scss';\nimport './carousel.css';\n\nimport LectureCard from './lecturecard';\n\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\n\nconst LectureCarousel = ({ classUuid, memberType, lectureList }: any) => {\n  const pagination = {\n    clickable: true,\n    renderBullet: (index: any, className: any) => {\n      return `<span class=\"${className}\">${index + 1}</span>`;\n    }\n  };\n  return (\n    <>\n      <Swiper\n        centeredSlides\n        className=\"swiper-container\"\n        spaceBetween={50}\n        slidesPerView={4}\n        navigation\n        pagination={pagination}\n      >\n        {lectureList.map(\n          ({ id: lectureId, lectureDate, lectureName, LiveStatus }: any) => (\n            <SwiperSlide>\n              <LectureCard\n                lectureNum={lectureId}\n                youtubeID=\"4-u7kewhpDU\"\n                date={lectureDate.slice(0, 10)}\n                to={`/class/${classUuid}/${memberType}/${lectureId}`}\n                key={lectureId}\n                isLive={LiveStatus}\n              />\n            </SwiperSlide>\n          )\n        )}\n      </Swiper>\n    </>\n  );\n};\n\nexport default LectureCarousel;\n","import React, { useState, useEffect, useRef } from 'react';\nimport YouTube from 'react-youtube';\nimport '../style/youtube.css';\n\nimport { Progress } from '@chakra-ui/react';\nimport { CreateMarkerButtons } from './common/Button';\nimport { useSocket } from '../context/socket';\nimport TimeMarker from './timeMarker';\nimport { Marker, MarkerType, MemberType } from '../types';\n\ninterface userInfo {\n  memberType: MemberType;\n  classUuid: string;\n  lectureId: number;\n  videoId: string;\n  videoIndex: number;\n  width?: number | string; // 100px or '65%'\n  height?: number | string;\n}\n\nenum VideoState {\n  UNSTARTED = -1,\n  ENDED,\n  PLAYING,\n  PAUSED,\n  BUFFERING,\n  CUED = 5\n}\n\nconst YouTubePlayer = ({\n  memberType,\n  classUuid,\n  lectureId,\n  videoId,\n  videoIndex,\n  width = '100%',\n  height = '100%',\n  isControled\n}: userInfo & { isControled?: boolean }) => {\n  const { socket, connected } = useSocket();\n  const [video, setVideo] = useState<any>(null); // youtube player - Q. type?\n\n  const [videoCurrent, setVideoCurrent] = useState<number>(0); // current running time of the video\n  const videoDuration = useRef<number>(0); // total video length\n  const intervalID = useRef<NodeJS.Timeout | null>(null); // setInterval return value for tracking current running time\n\n  // DOM ref\n  const videoWrapper = useRef<HTMLDivElement>(null);\n  const videoTimelineWrapper = useRef<HTMLDivElement>(null);\n\n  const [markers, setMarkers] = useState<Marker[]>([]); // get real 'markerInfoArr' data by calling DB API\n\n  // Cover/uncover video - for ad time or buffering\n  const cover = () => videoWrapper.current?.classList.add('coverVideo');\n  const uncover = () => videoWrapper.current?.classList.remove('coverVideo');\n  /*\n  // Usage)\n  cover();\n  setTimeout(() => {\n    uncover();\n  }, 2000);\n  */\n\n  // Cover youtube component before any video is selected\n  if (videoId === 'NULL') cover();\n  else uncover();\n\n  // Initialize\n  const onReady = (evt: any) => {\n    setVideo(evt.target);\n  };\n\n  // Set socket listeners and join room\n  useEffect(() => {\n    // If not instructor, sync video time, play, and pause\n    if (connected && !!video) {\n      if (isControled) {\n        socket?.on('InstructorTimeChange', (newtime: number) => {\n          video?.seekTo(newtime);\n        });\n        socket?.on('InstructorPlay', () => {\n          video?.playVideo();\n        });\n        socket?.on('InstructorPause', () => {\n          video?.pauseVideo();\n        });\n      }\n\n      socket?.on('GetMarkers', ({ markers: responseMarkers, status }) => {\n        if (status === 200) {\n          setMarkers(responseMarkers);\n        }\n      });\n      socket?.emit('GetMarkers', { classUuid, lectureId, videoIndex });\n    }\n\n    socket?.on('CreateMarker', ({ marker, status }) => {\n      if (status === 200) {\n        setMarkers(markerArr => [...markerArr, marker]);\n      }\n    });\n\n    return () => {\n      clearInterval(intervalID.current as NodeJS.Timeout);\n      socket?.off('InstructorTimeChange');\n      socket?.off('InstructorPlay');\n      socket?.off('InstructorPause');\n      socket?.off('GetMarkers');\n      socket?.off('CreateMarker');\n    };\n  }, [connected, video, videoIndex]);\n\n  if (isControled) videoWrapper.current?.classList.add('live');\n  else videoWrapper.current?.classList.remove('live');\n\n  // (For progress bar time) Set new setInterval on play\n  const onPlay = (evt: any) => {\n    if (video) {\n      videoDuration.current = video.playerInfo.duration;\n    }\n\n    intervalID.current = setInterval(() => {\n      setVideoCurrent(video.getCurrentTime());\n    }, 100);\n  };\n  // (For progress bar time) Remove setInterval on pause\n  const onPause = (evt: any) => {\n    clearInterval(intervalID.current as NodeJS.Timeout);\n  };\n\n  // Take care of sync logic here\n  const onStateChange = (evt: any) => {\n    if (isControled) return;\n\n    const player = evt.target;\n\n    const JO = JSON.stringify({\n      classUuid,\n      lectureId,\n      newtime: player.getCurrentTime()\n    });\n\n    // When instructor changes video time : (onStateChange evt) pause-buffer-play\n    // For now, detect 'buffer' as a cue of video time change\n    if (evt.data === VideoState.BUFFERING) {\n      socket?.emit('InstructorTimeChange', JO);\n    } else if (evt.data === VideoState.PLAYING) {\n      // In case of changing video time while paused - update time when resume playing\n      socket?.emit('InstructorTimeChange', JO);\n      socket?.emit('InstructorPlay', JO);\n    } else if (evt.data === VideoState.PAUSED) {\n      socket?.emit('InstructorPause', JO);\n    }\n  };\n\n  const createTimeMarker = (markerType: MarkerType) => {\n    // edge cases for time - outside [0, videoDuration]\n    let curTime = video.getCurrentTime();\n    curTime =\n      curTime > videoDuration.current ? videoDuration.current - 5 : curTime;\n\n    const payload = {\n      classUuid,\n      lectureId,\n      marker: {\n        markerType,\n        time: (curTime / videoDuration.current) * 100, // location of marker to be placed on the video\n        videoIndex\n      }\n    };\n    socket?.emit('CreateMarker', JSON.stringify(payload));\n  };\n\n  // Options for 'react-youtube' library component\n  const options = {\n    height: height.toString(),\n    width: width.toString(),\n    playerVars: {\n      autoplay: 0 as const,\n      controls: isControled ? (0 as const) : (1 as const),\n      disablekb: isControled ? (1 as const) : (0 as const),\n      rel: 0 as const\n    }\n  };\n\n  // (Optional - default : black backgroun) Use to set background image for video cover\n  const imgURL =\n    'https://previews.123rf.com/images/sevenozz/sevenozz1812/sevenozz181200056/127054720-vintage-tv-test-screen-please-stand-by-television-calibration-pattern.jpg';\n  const coverStyles = {\n    backgroundImage: `url(${imgURL})`,\n    backgroundSize: '100% 100%'\n  };\n\n  videoTimelineWrapper.current?.classList.add('showTimeline');\n\n  return (\n    <div\n      className={memberType === MemberType.INSTRUCTOR ? 'teacher' : 'student'}\n      id=\"youtube-wrapper\"\n      ref={videoWrapper}\n      style={{\n        width,\n        height\n      }}\n      // onMouseEnter={() => {\n      //   videoTimelineWrapper.current?.classList.add('showTimeline');\n      // }}\n      // onMouseLeave={() => {\n      //   videoTimelineWrapper.current?.classList.remove('showTimeline');\n      // }}\n    >\n      <CreateMarkerButtons onClick={createTimeMarker} />\n      {/* 3 Overlay components on top of video player - timeline marker, create marker buttons, and progress bar */}\n      <div className=\"video-timeline-components\" ref={videoTimelineWrapper}>\n        {markers.map(({ id, markerType, time: location }) => {\n          if (videoDuration.current === 0) return <div />;\n\n          return (\n            <TimeMarker\n              id={id}\n              time={location}\n              markerType={markerType}\n              videoIndex={videoIndex}\n            />\n          );\n        })}\n        {isControled ? (\n          <Progress\n            colorScheme=\"red\"\n            position=\"absolute\"\n            bottom=\"35px\"\n            height=\"5px\"\n            width=\"100%\"\n            value={\n              videoDuration.current\n                ? (videoCurrent / videoDuration.current) * 100\n                : 0\n            }\n          />\n        ) : (\n          <div /> /* Empty */\n        )}\n      </div>\n      <div className=\"video-cover\" style={coverStyles} />\n      <div className=\"video-container\">\n        <YouTube\n          className=\"video\"\n          videoId={videoId}\n          opts={options}\n          onReady={onReady}\n          onPlay={onPlay}\n          onPause={onPause}\n          onStateChange={onStateChange}\n        />\n      </div>\n    </div>\n  );\n};\nexport default YouTubePlayer;\n","import React, { useState, useEffect } from 'react';\nimport { Box, Flex, Button, useClipboard, useToast } from '@chakra-ui/react';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport LeftMenu from '../components/leftmenu/leftmenu';\nimport defaultNoticeTabEntries from '../data/leftmenuData';\nimport Chat from '../components/chat';\nimport FloatConnectionStatus from '../components/floatConnectionStatus';\nimport { Lecture, Member, TabSegment, TabType, UserTabEntry } from '../types';\nimport { useSocket } from '../context/socket';\nimport { ClipboardButton } from '../components/common/Button';\n// 🐛 나중에 lecture grid로 대체\nimport LectureCarousel from '../components/lecturecarousel/lecturecarousel';\n\nconst ClassPage = () => {\n  const { classUuid, memberType } = useParams();\n  const { socket, connected } = useSocket();\n  const [lectureList, setLectureList] = useState<Lecture[]>([]);\n\n  const { hasCopied, onCopy } = useClipboard(classUuid!);\n  const toast = useToast();\n\n  const noticeTabSegment: TabSegment = {\n    tabTitle: 'Classroom',\n    tabContents: defaultNoticeTabEntries\n  };\n\n  const [memberArr, setMemberArr] = useState<UserTabEntry[]>([]);\n  const memberTabSegment: TabSegment = {\n    tabTitle: 'Classmates',\n    tabContents: memberArr\n  };\n\n  useEffect(() => {\n    const payload = JSON.stringify({ classUuid });\n\n    // Initialize\n    socket?.on('JoinClass', () => {\n      socket?.emit('GetClassMembers', payload);\n      socket?.emit('GetLectures', payload);\n    });\n    socket?.emit('JoinClass', payload);\n\n    // Whenever new lecture is created - update lecture list\n    socket?.on('CreateLecture', response => {\n      const { lecture, status } = response;\n      if (status === 200) {\n        // socket?.emit('GetLectures', payload);\n        setLectureList(lecList => [...lecList, lecture]);\n      }\n    });\n\n    // get all members and lectures in the classroom\n    socket?.on('GetClassMembers', response => {\n      const { members, status } = response;\n      if (status === 200) {\n        // Formulate tabEntries for members\n        const newMemList = members.map(\n          (mem: Member): UserTabEntry => ({\n            tabName: mem.userName,\n            type: TabType.USER,\n            userId: mem.id\n          })\n        );\n        setMemberArr(newMemList);\n      }\n    });\n    socket?.on('GetLectures', response => {\n      const { lectures, status } = response;\n      if (status === 200) {\n        setLectureList(lectures);\n      }\n    });\n  }, [connected]);\n\n  const clickClipboard = () => {\n    onCopy();\n    toast({\n      title: 'ClassId copied to your clipboard!',\n      status: 'success',\n      duration: 1500,\n      isClosable: true\n    });\n  };\n  return (\n    <>\n      <FloatConnectionStatus />\n      <Flex>\n        <LeftMenu menus={[noticeTabSegment, memberTabSegment]} />\n        <Box w=\"8px\" h=\"100vh\" />\n        <Box w=\"100%\" h=\"100vh\" bgColor=\"gray.100\">\n          <LectureCarousel\n            classUuid={classUuid}\n            memberType={memberType}\n            lectureList={lectureList}\n          />\n          {memberType === 'instructor' && (\n            <Link to={`/class/${classUuid}/${memberType}/createLecture`}>\n              <Button>Create new lecture</Button>\n            </Link>\n          )}\n          <ClipboardButton onClick={clickClipboard}>\n            Copy Class Id\n          </ClipboardButton>\n        </Box>\n        {/* <Chat classUuid={classUuid!} hasHeader /> */}\n      </Flex>\n    </>\n  );\n};\n\nexport default ClassPage;\n","import React from 'react';\nimport { useSocket } from '../context/socket';\nimport { Marker, MarkerType } from '../types';\n\ninterface FlagProps {\n  color: string;\n}\n\nconst FlagSVG: React.FC<FlagProps> = ({ color }) => {\n  return (\n    <svg\n      width=\"26\"\n      height=\"42\"\n      viewBox=\"0 0 26 42\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        id=\"FlagSVGStroke\"\n        d=\"M0.25 41.75V1.35983C0.478428 0.930839 0.673497 0.640584 0.845353 0.461995C1.02353 0.276835 1.14455 0.243676 1.22836 0.250958C1.32482 0.259338 1.46095 0.327377 1.65137 0.532983C1.82818 0.723902 2.02343 1.00219 2.25 1.36856V41.75H0.25Z\"\n        fill={color}\n        stroke=\"black\"\n        strokeWidth=\"0.5\"\n      />\n      <path\n        id=\"FlagSVGStroke\"\n        d=\"M0.25 20.8038V3.86704C5.79233 6.03311 9.95189 6.92656 13.8517 6.82338C17.6706 6.72233 21.2189 5.66585 25.5464 3.95051C24.221 7.25607 23.5865 9.87565 23.6068 12.4474C23.6276 15.0852 24.3371 17.6498 25.6573 20.8285C20.9883 21.9986 17.2644 22.6277 13.4138 22.6521C9.53251 22.6767 5.51003 22.087 0.25 20.8038Z\"\n        fill={color}\n        stroke=\"black\"\n        strokeWidth=\"0.5\"\n      />\n    </svg>\n  );\n};\n\nconst TimeMarker = ({\n  id,\n  time,\n  markerType,\n  videoIndex\n}: Omit<Marker, 'messages'>) => {\n  const { socket } = useSocket();\n\n  // Click handler - Send click event through Socket, to Chat component\n  const onClickEvt = () => {\n    const payload = JSON.stringify({ markerId: id, markerType });\n\n    // send 'markerId' of clicked marker to Chat component\n    socket?.emit('TimeMarkerClicked', payload);\n  };\n\n  const colorPick = (markerT: MarkerType) => {\n    switch (markerT) {\n      case MarkerType.DISCUSSION:\n        return 'blue';\n      case MarkerType.QUESTION:\n        return 'red';\n      default:\n        throw new Error('Invalid MarkerType');\n    }\n  };\n\n  return (\n    <button\n      className=\"timeline-marker\"\n      style={{\n        left: `${time}%` /* ratio of current time to video duration */\n      }}\n      type=\"button\"\n      aria-label=\"timeline\"\n      onClick={() => onClickEvt()}\n    >\n      <FlagSVG color={colorPick(markerType)} />\n    </button>\n  );\n};\n\nexport default TimeMarker;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { CloseButton, Flex } from '@chakra-ui/react';\n\nimport ChatMessage from './chatMessage';\nimport ChatInput from './chatInput';\nimport Header from './common/Header';\n\nimport { MarkerType, TextMessageResponse } from '../types';\n\nimport { useSocket } from '../context/socket';\nimport useMe from '../hooks/useMe';\n\nenum ChatMode {\n  Marker = 'Marker',\n  Live = 'Live',\n  Individual = 'Individual'\n}\n\ntype ChatStatus =\n  | {\n      chatMode: ChatMode.Live;\n    }\n  | { chatMode: ChatMode.Marker; markerType: MarkerType }\n  | { chatMode: ChatMode.Individual; peer: { id: number; name: string } };\n\ninterface ChatProps {\n  hasHeader: boolean;\n  classUuid: string;\n  lectureId: number;\n  customHeader?: string;\n}\n\n// 🚨 Possible duplicate with 'interface ChatMessageProps' in 'chatMessage.tsx'\ninterface Message {\n  messageId: number;\n  userName: string;\n  message: string;\n  time: string;\n  isMy: boolean;\n}\n\nconst Chat = ({\n  hasHeader,\n  classUuid,\n  lectureId,\n  customHeader = ''\n}: ChatProps) => {\n  const { socket, connected } = useSocket();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const chatStatus = useRef<ChatStatus>({\n    chatMode: ChatMode.Live\n  });\n  const currentMarkerId = useRef<number>(-1);\n  const { id: myId } = useMe();\n\n  // Set Chat header title\n  const pickHeader = (chatStat: ChatStatus) => {\n    switch (chatStat.chatMode) {\n      case ChatMode.Live:\n        return 'Live Chat';\n      case ChatMode.Marker:\n        return chatStat.markerType === MarkerType.QUESTION\n          ? 'Question'\n          : 'Discussion';\n      case ChatMode.Individual:\n        return chatStat.peer.name;\n      default:\n        throw new Error('Invalid ChatStatus');\n    }\n  };\n  const header = pickHeader(chatStatus.current);\n\n  // @args {MarkerTextMessageEntity} message - message response from the server\n  const createNewMessageObj = (messageResponse: any): Message => {\n    const {\n      dateStr,\n      senderId,\n      senderName,\n      text,\n      messageId\n    }: TextMessageResponse = messageResponse;\n    const dateObj = new Date(dateStr);\n    const messageObj: Message = {\n      messageId, // Live chat doesn't have messageId\n      userName: senderName,\n      message: text,\n      time: `${dateObj.getHours()}:${dateObj.getMinutes()}`,\n      isMy: senderId === myId\n    };\n    return messageObj;\n  };\n\n  // Socket listeners\n  useEffect(() => {\n    // TimeMarker Click event - fetch discussion messages\n    socket?.on(\n      'TimeMarkerClicked',\n      (markerId: number, markerType: MarkerType) => {\n        currentMarkerId.current = markerId;\n        chatStatus.current = { chatMode: ChatMode.Marker, markerType };\n        socket?.emit('GetMarkerMessages', JSON.stringify({ markerId }));\n      }\n    );\n\n    // Retrieve saved marker messages\n    socket?.on('GetMarkerMessages', ({ textMessages, status }) => {\n      setMessages(arr => []); // clear\n\n      const retrievedMessages: Message[] = textMessages.map(\n        (messageResponse: any) => createNewMessageObj(messageResponse)\n      );\n      setMessages(arr => [...arr, ...retrievedMessages]);\n    });\n\n    // Live chat event - get live chat message\n    socket?.on('LiveChatTextMessage', ({ message, status }) => {\n      if (status === 200 && chatStatus.current.chatMode === ChatMode.Live) {\n        setMessages(arr => [...arr, createNewMessageObj(message)]);\n      }\n    });\n\n    // Marker chat event - get marker chat message\n    socket?.on('MarkerTextMessage', ({ markerId, savedMessage, status }) => {\n      if (\n        status === 200 &&\n        chatStatus.current.chatMode === ChatMode.Marker &&\n        currentMarkerId.current === markerId\n      ) {\n        setMessages(arr => [...arr, createNewMessageObj(savedMessage)]);\n      }\n    });\n  }, [connected]);\n\n  // Click 'X' close button in the header\n  // 1) chatMode.current == discussion mode : change to Live mode; fetch Live chat messages\n  // 2) chatMode.current == Live chatting : clear chat\n  const backToLiveChat = () => {\n    chatStatus.current = { chatMode: ChatMode.Live };\n    setMessages([]); // 🐛 (API?) Fetch Live chat message\n  };\n\n  const createMessage = (text: string) => {\n    if (text.trim().length === 0) return; // ignore empty string\n\n    // Create and send message\n    switch (chatStatus.current.chatMode) {\n      case ChatMode.Live:\n        socket?.emit(\n          'LiveChatTextMessage',\n          JSON.stringify({\n            classUuid,\n            lectureId,\n            text\n          })\n        );\n        break;\n      case ChatMode.Marker:\n        socket?.emit(\n          'MarkerTextMessage',\n          JSON.stringify({\n            classUuid,\n            lectureId,\n            markerTextMessage: {\n              markerId: currentMarkerId.current,\n              message: text\n            }\n          })\n        );\n        break;\n      case ChatMode.Individual:\n        break;\n      default:\n        throw new Error('Invalid ChatStatus');\n    }\n  };\n\n  const colorPick = () => {\n    switch (chatStatus.current.chatMode) {\n      case ChatMode.Live:\n        return 'gray.50';\n      case ChatMode.Marker:\n        return chatStatus.current.markerType === MarkerType.QUESTION\n          ? '#FF4A3E'\n          : '#3D9AFC';\n      case ChatMode.Individual:\n        return '#298977';\n      default:\n        throw new Error('Invalid MarkerType');\n    }\n  };\n\n  return (\n    <Flex\n      w=\"auto\"\n      h=\"100vh\"\n      backgroundColor=\"gray.50\"\n      flexDir=\"column\"\n      align=\"center\"\n    >\n      {hasHeader && (\n        <Header\n          backgroundColor={colorPick()}\n          color=\"black\"\n          headingSize=\"md\"\n          headingText={header}\n          p=\"5px 15px\"\n        >\n          <CloseButton marginLeft=\"auto\" size=\"md\" onClick={backToLiveChat} />\n        </Header>\n      )}\n      <Flex w=\"280px\" overflowY=\"auto\" pb={3} pt={3} flexDir=\"column\" h=\"full\">\n        {messages.map(({ userName, message, time, messageId, isMy }) => (\n          <ChatMessage\n            key={messageId}\n            userName={userName}\n            message={message}\n            time={time}\n            isMy={isMy}\n          />\n        ))}\n      </Flex>\n      <ChatInput sendMessage={(msg: string) => createMessage(msg)} />\n    </Flex>\n  );\n};\n\nexport default Chat;\n","import React from 'react';\nimport { Box, Flex } from '@chakra-ui/react';\nimport { generateKeyPair } from 'crypto';\n\ninterface ChatMessageProps {\n  userName: string;\n  message: string;\n  time: string;\n  isMy: boolean;\n}\n\ninterface MessageProps {\n  message: string;\n  backgroundColor: string;\n  color: string;\n}\n\nconst Message = ({ message, backgroundColor, color }: MessageProps) => {\n  return (\n    <Box\n      maxWidth=\"200px\"\n      backgroundColor={backgroundColor}\n      color={color}\n      marginBottom=\"auto\"\n      borderRadius=\"7px\"\n      fontSize=\"14px\"\n      p=\"5px 7px\"\n    >\n      {message}\n    </Box>\n  );\n};\n\nconst Time = ({ time }: { time: string }) => {\n  return (\n    <Box fontSize={5} marginTop=\"auto\" p={1} color=\"black\">\n      {time}\n    </Box>\n  );\n};\n\nconst Username = ({ userName }: { userName: string }) => {\n  return (\n    <Box\n      width=\"fit-content\"\n      mt={0}\n      mb={0.5}\n      fontSize=\"14px\"\n      p=\"2px 5px\"\n      textAlign=\"start\"\n    >\n      {userName}\n    </Box>\n  );\n};\n\nconst ChatMessage = ({ userName, message, time, isMy }: ChatMessageProps) => {\n  return (\n    <Box width=\"full\" p=\"4px 8px 0px\" m={0}>\n      {!isMy && <Username userName={userName} />}\n      <Flex\n        display=\"flex\"\n        justifyContent={isMy ? 'right' : 'left'}\n        alignContent=\"center\"\n        m={0}\n      >\n        {isMy ? (\n          <>\n            <Time time={time} />\n            <Message\n              message={message}\n              backgroundColor=\"blue.500\"\n              color=\"gray.50\"\n            />\n          </>\n        ) : (\n          <>\n            <Message\n              message={message}\n              backgroundColor=\"gray.100\"\n              color=\"black\"\n            />\n            <Time time={time} />\n          </>\n        )}\n      </Flex>\n    </Box>\n  );\n};\n\nexport default ChatMessage;\n","import React from 'react';\nimport { createIcon, Icon } from '@chakra-ui/react';\n\nconst RecordIcon = createIcon({\n  displayName: 'RecordIcon',\n  path: (\n    <svg\n    //   //   enable-background=\"new 0 0 141.732 141.732\"\n    //   height=\"141.732px\"\n    //   id=\"Livello_1\"\n    //   version=\"1.1\"\n    //   viewBox=\"0 0 141.732 141.732\"\n    //   width=\"141.732px\"\n    //   //   xml:space=\"preserve\"\n    //   xmlns=\"http://www.w3.org/2000/svg\"\n    //   //   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <g id=\"Livello_7\">\n        <path d=\"M91.192,59.623V21.946c0.043-0.534,0.068-1.073,0.068-1.618C91.262,9.102,82.161,0,70.935,0   c-11.229,0-20.33,9.104-20.33,20.328c0,0.545,0.024,1.084,0.066,1.618v37.677c-0.042,0.535-0.066,1.073-0.066,1.621   c0,11.229,9.103,20.326,20.329,20.326c11.227,0,20.327-9.1,20.327-20.326C91.262,60.696,91.235,60.158,91.192,59.623    M120.942,50.219c0-3.084-2.5-5.584-5.584-5.584c-3.082,0-5.582,2.5-5.582,5.584c0,0.047,0.004,0.092,0.008,0.139   c-0.076,21.43-17.471,38.779-38.917,38.779c-21.448,0-38.842-17.353-38.917-38.779c0.002-0.047,0.008-0.092,0.008-0.139   c0-3.084-2.5-5.584-5.584-5.584s-5.585,2.5-5.585,5.584c0,25.714,19.388,46.896,44.339,49.743v28.648H38.78   c-2.96,0-5.358,2.402-5.358,5.361c0,2.961,2.398,5.355,5.358,5.355h26.35h11.61h26.35c2.959,0,5.357-2.396,5.357-5.355   c0-2.959-2.398-5.361-5.357-5.361h-26.35V99.945C101.628,97.039,120.942,75.885,120.942,50.219\" />\n      </g>\n      <g id=\"Livello_1_1_\" />\n    </svg>\n  )\n});\n\nconst FlagIcon = createIcon({\n  displayName: 'flagIcon',\n  path: (\n    <svg\n      version=\"1.1\"\n      id=\"Capa_1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      x=\"0px\"\n      y=\"0px\"\n      viewBox=\"0 0 206.505 206.505\"\n      xmlSpace=\"preserve\"\n    >\n      <g>\n        <path\n          d=\"M167.069,16.354c-0.426,0.186-43.29,18.671-70.274-4.481c-31.021-26.619-60.722-0.2-61.012,0.072\n\t\tL34.623,13l-0.179,193.494l7.108,0.011l0.115-122.594c5.157-4.091,27.11-19.086,50.498,0.988\n\t\tc30.356,26.047,75.839,6.438,77.765,5.59l2.133-0.938V14.153L167.069,16.354z M164.943,84.824\n\t\tc-8.997,3.389-44.603,14.874-68.148-5.322c-10.375-8.904-20.6-11.871-29.629-11.871c-10.815,0-19.923,4.266-25.489,7.702\n\t\tl0.047-59.101c5.264-4.169,27.142-18.961,50.44,1.034c24.855,21.323,59.863,12.043,72.78,7.516V84.824z\"\n        />\n      </g>\n    </svg>\n  )\n});\n\nconst CircleIcon = (props: any) => (\n  <Icon viewBox=\"0 0 200 200\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\"\n    />\n  </Icon>\n);\n\nexport { RecordIcon, FlagIcon, CircleIcon };\n","import { useParams } from 'react-router';\n\nconst useParsedClassLectureIds = () => {\n  const { classUuid, lectureId } = useParams();\n\n  if (!classUuid) {\n    throw new Error('No ClassUuid');\n  }\n\n  if (!lectureId) {\n    throw new Error('No Lecture Id');\n  }\n  const parsedLectureId = parseInt(lectureId, 10);\n  return { classUuid, lectureId: parsedLectureId };\n};\n\nexport default useParsedClassLectureIds;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { IconButton } from '@chakra-ui/react';\nimport { CircleIcon } from './common/icons';\nimport { useSocket } from '../context/socket';\nimport useParsedClassLectureIds from '../hooks/useParsedClassLectureId';\n\nconst AudioRecorder = () => {\n  const [audioStream, setAudioStream] = useState<MediaStream>();\n  const [media, setMedia] = useState<MediaRecorder>();\n  const [onRec, setOnRec] = useState(true);\n  const [source, setSource] = useState<MediaStreamAudioSourceNode>();\n  const [audioAnalyser, setAudioAnalyser] = useState<ScriptProcessorNode>();\n  const [audioUrl, setAudioUrl] = useState<Blob>();\n\n  const { socket, connected } = useSocket();\n\n  const { classUuid, lectureId } = useParsedClassLectureIds();\n\n  useEffect(() => {\n    if (connected && socket) {\n      socket.on(\n        'LiveChatAudioMessage',\n        ({\n          arrayBuffer,\n          senderId\n        }: {\n          arrayBuffer: ArrayBuffer;\n          senderId: number;\n        }) => {\n          const blob = new Blob([new Uint8Array(arrayBuffer)]);\n          const url = URL.createObjectURL(blob);\n          const audio = new Audio(url);\n          audio.play();\n        }\n      );\n    }\n  }, [connected]);\n\n  const onRecAudio = () => {\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\n    const audioCtx = new window.AudioContext();\n    // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAudioAnalyser(analyser);\n\n    const makeSound = (stream: MediaStream) => {\n      const src = audioCtx.createMediaStreamSource(stream);\n      setSource(src);\n      src.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    };\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setAudioStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n\n      analyser.onaudioprocess = e => {\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(track => {\n            track.stop();\n          });\n          mediaRecorder.stop();\n\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n\n          mediaRecorder.ondataavailable = (blobEvent: BlobEvent) => {\n            setAudioUrl(blobEvent.data);\n            setOnRec(true);\n          };\n        } else {\n          setOnRec(false);\n        }\n      };\n    });\n  };\n\n  const offRecAudio = () => {\n    if (media) {\n      media.ondataavailable = e => {\n        setAudioUrl(e.data);\n        setOnRec(true);\n      };\n    }\n\n    if (audioStream) {\n      audioStream.getAudioTracks().forEach(track => {\n        track.stop();\n      });\n    }\n\n    if (media) media.stop();\n    if (audioAnalyser) audioAnalyser.disconnect();\n    if (source) source.disconnect();\n  };\n\n  const onSubmitAudioFile = useCallback(() => {\n    if (audioUrl) {\n      const sound = new File([audioUrl], 'soundBlob', {\n        lastModified: new Date().getTime(),\n        type: 'audio'\n      });\n      const payload = {\n        classUuid,\n        lectureId,\n        arrayBuffer: sound\n      };\n      socket?.emit('LiveChatAudioMessage', payload);\n    }\n  }, [audioUrl]);\n\n  return (\n    <>\n      <IconButton\n        aria-label=\"Record Voice Chat\"\n        icon={<CircleIcon style={{ color: onRec ? 'black' : 'red' }} />}\n        onClick={onRec ? onRecAudio : offRecAudio}\n      />\n      <button type=\"button\" onClick={onSubmitAudioFile}>\n        Send Audio Message\n      </button>\n    </>\n  );\n};\n\nexport default AudioRecorder;\n","import React, { useState, useEffect } from 'react';\nimport { IconButton, Textarea, Flex } from '@chakra-ui/react';\nimport { ChatIcon, TimeIcon } from '@chakra-ui/icons';\nimport AudioRecorder from './audioRecorder';\n\nconst ChatInput = ({ sendMessage }: any) => {\n  const [message, setMessage] = useState('');\n\n  // init - set keyboard keydown\n  useEffect(() => {\n    document.addEventListener('keydown', keydownEvents);\n    return () => document.removeEventListener('keydown', keydownEvents);\n  });\n\n  const keydownEvents = (evt: any) => {\n    if (!evt.shiftKey && (evt.code === 'Enter' || evt.code === 'NumpadEnter')) {\n      evt.preventDefault();\n      sendMessage(message);\n      setMessage(''); // clear message after send\n    }\n  };\n\n  return (\n    <Flex p=\"8px 6px\" w=\"full\" backgroundColor=\"white\" flexDir=\"column\">\n      <Textarea\n        placeholder=\"Enter Chat\"\n        fontSize=\"14px\"\n        rows={2}\n        m={0.5}\n        borderColor=\"black\"\n        p=\"5px 5px\"\n        resize=\"vertical\"\n        value={message}\n        onChange={evt => {\n          setMessage(evt.target.value);\n        }}\n      />\n      <Flex justifyContent=\"right\">\n        <IconButton\n          onClick={evt => {\n            sendMessage(message);\n            setMessage(''); // clear message after send\n          }}\n          size=\"md\"\n          icon={<ChatIcon />}\n          aria-label=\"Send Message\"\n          m={0.5}\n        />\n        <AudioRecorder />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default ChatInput;\n","import React from 'react';\nimport { Flex, Heading, Box } from '@chakra-ui/react';\n\ninterface HeaderProps {\n  backgroundColor: string;\n  color: string;\n  headingSize: string;\n  p: number | string;\n  headingText: string;\n}\n\nconst Header = ({\n  children,\n  backgroundColor,\n  color,\n  headingSize,\n  p,\n  headingText\n}: React.PropsWithChildren<HeaderProps>) => {\n  return (\n    <Flex\n      width=\"full\"\n      p={p}\n      backgroundColor={backgroundColor}\n      color={color}\n      justify=\"space-between\"\n    >\n      <Heading mt=\"3px\" size={headingSize}>\n        {headingText}\n      </Heading>\n      <Flex>{children}</Flex>\n    </Flex>\n  );\n};\n\nexport default Header;\n","import { useContext } from 'react';\nimport UserContext from '../context/user/userContext';\n\nconst useMe = () => {\n  const { status, userName, id } = useContext(UserContext);\n\n  return { status, userName, id };\n};\n\nexport default useMe;\n","import axios from 'axios';\n\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\nconst MAX_NUM = 10;\n\nconst getPlayListItems = async (playlistID: string) => {\n  const result = await axios.get(\n    `https://www.googleapis.com/youtube/v3/playlistItems`,\n    {\n      params: {\n        part: 'id,snippet',\n        maxResults: MAX_NUM,\n        playlistId: playlistID,\n        key: process.env.REACT_APP_YOUTUBE_API_KEY\n      }\n    }\n  );\n  return result.data;\n};\n\nexport { getPlayListItems };\n","import React from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalBody,\n  ModalContent,\n  ModalCloseButton,\n  ModalHeader,\n  HStack\n} from '@chakra-ui/react';\n\nimport {\n  initContent,\n  createContent,\n  joinContent\n} from './classAddModalContents';\nimport { Class } from '../../types';\n\nexport enum ClassAddModalState {\n  INIT,\n  JOIN,\n  CREATE\n}\n\ninterface AddClassModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  addClass: (newClass: Class) => void;\n}\n\nconst AddClassModal = ({ isOpen, onClose, addClass }: AddClassModalProps) => {\n  const [modalState, setModalState] = React.useState(ClassAddModalState.INIT);\n  const [title, setTitle] = React.useState('');\n  const [subtitle, setSubtitle] = React.useState('');\n  const [joinClassUUID, setJoinUUID] = React.useState('');\n\n  const onChangejoinUUID = (e: any) => {\n    setJoinUUID(e.target.value);\n  };\n  const onChangeTitle = (e: any) => {\n    setTitle(e.target.value);\n  };\n  const onChangeSubtitle = (e: any) => {\n    setSubtitle(e.target.value);\n  };\n\n  const onModalClose = () => {\n    setTitle('');\n    setSubtitle('');\n    setJoinUUID('');\n    onClose();\n    setModalState(ClassAddModalState.INIT);\n  };\n\n  const handleJoin = () => {\n    fetch('http://localhost:5000/api/lobby/class', {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ uuid: joinClassUUID })\n    })\n      .then(r => r.json())\n      .then(j => {\n        if (j.status === 200) {\n          addClass(j.class);\n          onModalClose();\n        } else if (j.status === 400) {\n          throw new Error(j.err);\n        }\n      })\n      .catch(e => {\n        // TODO: 실패시 에러 핸들링\n        console.error(e);\n      });\n  };\n\n  const handleCreate = () => {\n    fetch('http://localhost:5000/api/lobby/class', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ title, subtitle })\n    })\n      .then(r => r.json())\n      .then(j => {\n        if (j.status === 200) {\n          addClass(j.class);\n          onModalClose();\n        } else if (j.status === 400) {\n          throw new Error(j.err);\n        }\n      })\n      .catch(e => {\n        // TODO: 실패시 에러 핸들링\n        console.error(e);\n      });\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onModalClose} size=\"xl\">\n      <ModalOverlay />\n      <ModalContent height=\"500px\">\n        <ModalHeader textAlign=\"center\" fontSize=\"30px\" fontWeight=\"bold\">\n          New Class\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6} h=\"300px\">\n          <HStack justifyContent=\"center\" alignItems=\"center\" w=\"full\" h=\"full\">\n            {modalState === ClassAddModalState.INIT &&\n              initContent({ setModalState })}\n            {modalState === ClassAddModalState.JOIN &&\n              joinContent({ onChangejoinUUID, handleJoin, onModalClose })}\n            {modalState === ClassAddModalState.CREATE &&\n              createContent({\n                onChangeTitle,\n                onChangeSubtitle,\n                handleCreate,\n                onModalClose\n              })}\n          </HStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\nexport default AddClassModal;\n","import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { Box, Flex } from '@chakra-ui/react';\nimport { useParams } from 'react-router';\nimport { type } from 'os';\nimport LeftMenu from '../components/leftmenu/leftmenu';\nimport defaultNoticeTabEntries from '../data/leftmenuData';\nimport YouTube from '../components/youtube';\nimport Chat from '../components/chat';\nimport FloatConnectionStatus from '../components/floatConnectionStatus';\nimport {\n  MemberType,\n  Lecture,\n  Member,\n  TabSegment,\n  TabType,\n  UserTabEntry,\n  VideoTabEntry,\n  NoticeTabEntry\n} from '../types';\nimport { useSocket } from '../context/socket';\nimport { getPlayListItems } from '../components/common/playlist';\nimport LectureContext from '../context/lecture/lectureContext';\n\nconst LecturePage = () => {\n  const { classUuid, memberType, lectureId } = useParams();\n  const { socket, connected } = useSocket();\n  const [lecture, setLecture] = useState<Lecture>();\n  const { isLive, setIsLive, selectedVidIdx, setSelectedVidIdx } =\n    useContext(LectureContext);\n\n  const EMPTY_HANDLER = () => {\n    // Do nothing\n  };\n\n  const [videoArr, setVideoArr] = useState<VideoTabEntry[]>([]);\n  const videoTabSegment: TabSegment = {\n    tabTitle: 'Playlist',\n    tabContents: videoArr\n  };\n  const [memberArr, setMemberArr] = useState<UserTabEntry[]>([]);\n  const memberTabSegment: TabSegment = {\n    tabTitle: 'Participants',\n    tabContents: memberArr\n  };\n\n  const [noticeArr, setNoticeArr] = useState<NoticeTabEntry[]>(\n    defaultNoticeTabEntries\n  );\n  const noticeTabSegment: TabSegment = {\n    tabTitle: 'Lecture room',\n    tabContents: noticeArr\n  };\n\n  useEffect(() => {\n    if (memberType === MemberType.INSTRUCTOR) {\n      const payload = JSON.stringify({\n        classUuid,\n        lectureId: parsedLectureId,\n        status: !isLive\n      });\n      const toggleLiveButton: NoticeTabEntry = {\n        tabName: `${isLive ? '⚫ Off' : '🔴 Go'} Live`,\n        type: TabType.NOTICE,\n        message: 'toggleLive',\n        onClickHandler: () => {\n          socket?.emit('SetLectureLiveStatus', payload);\n        }\n      };\n      setNoticeArr([...defaultNoticeTabEntries, toggleLiveButton]);\n    } else {\n      const notifyLiveButton: NoticeTabEntry = {\n        tabName: isLive ? '🔴 On-Live' : '⚫ Off-Live',\n        type: TabType.NOTICE,\n        message: 'notifyLive',\n        onClickHandler: EMPTY_HANDLER\n      };\n      setNoticeArr([...defaultNoticeTabEntries, notifyLiveButton]);\n    }\n  }, [isLive]);\n\n  const parsedLectureId = parseInt(lectureId!, 10);\n\n  useEffect(() => {\n    if (!lecture) return;\n\n    const videoList: VideoTabEntry[] = [];\n    getPlayListItems(lecture.playlist).then(data => {\n      data.items.forEach((element: any, idx: number) => {\n        videoList.push({\n          tabName: element.snippet.title,\n          type: TabType.VIDEO,\n          videoIdx: idx,\n          link: element.snippet.resourceId.videoId,\n          onClickHandler: () => {\n            // only the instructor gets to choose video on LIVE\n            socket?.emit('SelectVideo', {\n              classUuid,\n              lectureId: parsedLectureId,\n              selectedVideoIdx: idx\n            });\n          }\n        });\n      });\n\n      setVideoArr(videoList);\n    });\n  }, [lecture]);\n\n  // Get videos in the playlist & participants in the lecture\n  useEffect(() => {\n    socket?.on('JoinLecture', ({ user, lecture: lec, status }) => {\n      if (status === 200) {\n        setLecture(lec);\n\n        const newUser: UserTabEntry = {\n          tabName: user.userName,\n          type: TabType.USER,\n          userId: user.id\n        };\n\n        setMemberArr(arr => [...arr, newUser]);\n        const payload = { classUuid, lectureId: parsedLectureId };\n        socket?.emit('GetActiveLectureMember', payload);\n      }\n    });\n    const payload = { classUuid, lectureId: parsedLectureId };\n    socket?.emit('JoinLecture', payload);\n\n    // get members participating in the lecture\n    socket?.on('GetActiveLectureMember', response => {\n      const { members, status } = response;\n      if (status === 200) {\n        const newMemList = members.map(\n          (mem: Member): UserTabEntry => ({\n            tabName: mem.userName,\n            type: TabType.USER,\n            userId: mem.id\n          })\n        );\n        setMemberArr(newMemList);\n      }\n    });\n\n    // lecture live status change\n    socket?.on('SetLectureLiveStatus', response => {\n      const { liveStatus, status } = response;\n      if (status === 200) {\n        setIsLive(liveStatus);\n      }\n    });\n\n    // instructor selected video among playlist\n    socket?.on('SelectVideo', response => {\n      const { selectedVideoIdx, status } = response;\n      if (status === 200) {\n        setSelectedVidIdx(selectedVideoIdx);\n      }\n    });\n  }, [connected]);\n\n  // TODO - Take care of playlist\n  // 1. Get lecture list and construct 'menus' for leftmenu\n  // 2. Use lectureDate and lectureName somehow?\n\n  console.log(isLive, memberType, isLive && memberType === MemberType.STUDENT);\n\n  return (\n    <>\n      <FloatConnectionStatus />\n      <Flex>\n        <LeftMenu\n          menus={[noticeTabSegment, videoTabSegment, memberTabSegment]}\n        />\n        <Box w=\"8px\" h=\"100vh\" />\n        <Box w=\"100%\" h=\"100vh\">\n          <YouTube\n            memberType={(memberType ?? MemberType.STUDENT) as MemberType}\n            classUuid={classUuid ?? 'uuid error'}\n            lectureId={parsedLectureId}\n            videoIndex={selectedVidIdx}\n            videoId={\n              videoArr.length > 0 ? videoArr[selectedVidIdx].link : 'NULL'\n            }\n            width=\"100%\"\n            height=\"100%\"\n            isControled={memberType === MemberType.STUDENT && isLive}\n          />\n        </Box>\n        <Chat classUuid={classUuid!} lectureId={parsedLectureId} hasHeader />\n      </Flex>\n    </>\n  );\n};\n\nexport default LecturePage;\n","import React from 'react';\n\nimport {\n  Input,\n  InputGroup,\n  Stack,\n  Button,\n  FormControl,\n  FormLabel\n} from '@chakra-ui/react';\nimport { AddIcon, CalendarIcon } from '@chakra-ui/icons';\nimport { ClassAddModalState } from './classAddModal';\n\ninterface initContentProps {\n  setModalState: (modalState: ClassAddModalState) => void;\n}\n\nconst initContent = ({ setModalState }: initContentProps) => {\n  return (\n    <>\n      <Button\n        w={200}\n        h={200}\n        onClick={() => {\n          setModalState(ClassAddModalState.JOIN);\n        }}\n      >\n        <CalendarIcon w={10} h={10} />\n        <br />\n        Join\n      </Button>\n      <Button\n        w={200}\n        h={200}\n        onClick={() => {\n          setModalState(ClassAddModalState.CREATE);\n        }}\n      >\n        <AddIcon w={10} h={10} />\n        <br />\n        Create\n      </Button>\n    </>\n  );\n};\n\nconst joinContent = ({ onChangejoinUUID, handleJoin, onModalClose }: any) => {\n  return (\n    <Stack>\n      <FormControl>\n        <FormLabel>Join ID</FormLabel>\n        <InputGroup size=\"lg\">\n          <Input\n            type=\"text\"\n            placeholder=\"Class ID\"\n            onChange={onChangejoinUUID}\n          />\n        </InputGroup>\n      </FormControl>\n      <Button onClick={handleJoin} colorScheme=\"blue\" mr={3}>\n        Join\n      </Button>\n      <Button onClick={onModalClose}>Cancel</Button>\n    </Stack>\n  );\n};\n\nconst createContent = ({\n  onChangeTitle,\n  onChangeSubtitle,\n  handleCreate,\n  onModalClose\n}: any) => {\n  console.log(onChangeSubtitle);\n  return (\n    <Stack>\n      <FormControl>\n        <FormLabel>Class Title</FormLabel>\n        <InputGroup size=\"lg\">\n          <Input\n            type=\"text\"\n            placeholder=\"Class name\"\n            onChange={onChangeTitle}\n          />\n        </InputGroup>\n      </FormControl>\n      <FormControl>\n        <FormLabel>Class Subtitle</FormLabel>\n        <InputGroup>\n          <Input\n            type=\"text\"\n            placeholder=\"Class Subtitle\"\n            onChange={onChangeSubtitle}\n          />\n        </InputGroup>\n      </FormControl>\n      <Button onClick={handleCreate} colorScheme=\"blue\" mr={3}>\n        Save\n      </Button>\n      <Button onClick={onModalClose}>Cancel</Button>\n    </Stack>\n  );\n};\n\nexport { initContent, joinContent, createContent };\n","import React from 'react';\nimport { SimpleGrid, Grid } from '@chakra-ui/react';\n\ninterface LobbyContentProps {\n  col: string | undefined;\n}\n\nconst LobbyContent = ({\n  col,\n  children\n}: React.PropsWithChildren<LobbyContentProps>) => {\n  return (\n    <>\n      <SimpleGrid\n        gridTemplateRows=\"repeat(auto-fit, auto)\"\n        gridTemplateColumns=\"repeat(auto-fit, 270px)\"\n        spacing={8}\n        p={5}\n      >\n        {children}\n      </SimpleGrid>\n    </>\n  );\n};\n\nexport default LobbyContent;\n","import React from 'react';\nimport { Box, Image, Flex } from '@chakra-ui/react';\nimport stc from 'string-to-color';\n\ninterface ClassCardProps {\n  imgSrc?: string;\n  title: string;\n  subTitle: string;\n  color: string;\n  backgroundColor: string;\n}\n\nconst ClassCard = ({\n  imgSrc,\n  title,\n  subTitle,\n  color,\n  backgroundColor\n}: ClassCardProps) => {\n  const classColor = stc({ title });\n  const regexColor = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\n    classColor\n  );\n  const r = regexColor ? parseInt(regexColor[1], 16) : 0;\n  const g = regexColor ? parseInt(regexColor[2], 16) : 0;\n  const b = regexColor ? parseInt(regexColor[3], 16) : 0;\n  const isDark = r + g + b < 127 * 3;\n\n  return (\n    <Box\n      w=\"270px\"\n      h={150}\n      overflow=\"hidden\"\n      position=\"relative\"\n      borderRadius=\"30px\"\n      color={isDark ? 'white' : 'black'}\n      _hover={{ cursor: 'pointer', boxShadow: '0 0 3px rgba(0,0,0,1)' }}\n    >\n      <Flex\n        p={4}\n        w=\"full\"\n        h=\"100%\"\n        position=\"absolute\"\n        bottom={0}\n        backgroundColor={classColor}\n        direction=\"column\"\n      >\n        <Box\n          pl=\"5px\"\n          fontSize={40}\n          fontWeight=\"bold\"\n          display=\"inline\"\n          marginTop=\"auto\"\n        >\n          {`${title}   `}\n        </Box>\n        <Box pl=\"5px\" fontSize={20} fontWeight=\"bold\" display=\"inline\">\n          {`${subTitle}`}\n        </Box>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default ClassCard;\n","import { useState, useEffect } from 'react';\nimport { Class, UserLoadStatus } from '../types';\nimport useMe from './useMe';\n\nconst useClasses = () => {\n  const [classes, setClasses] = useState<Class[]>([]);\n  const { status } = useMe();\n\n  useEffect(() => {\n    if (status === UserLoadStatus.LOADED) {\n      fetch('http://localhost:5000/api/lobby/classes', {\n        method: 'GET'\n      })\n        .then(r => r.json())\n        .then(j => {\n          setClasses(j.classes);\n        })\n        .catch(e => console.error(e));\n    }\n  }, [status]);\n\n  const addClass = (newClass: Class) => {\n    setClasses(classArr => [...classArr, newClass]);\n  };\n\n  return { classes, addClass };\n};\n\nexport default useClasses;\n","export default __webpack_public_path__ + \"static/media/logo2.7da65d47.svg\";","import React from 'react';\nimport {\n  Box,\n  IconButton,\n  useDisclosure,\n  Heading,\n  Image\n} from '@chakra-ui/react';\nimport { useBreakpointValue } from '@chakra-ui/media-query';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { Link } from 'react-router-dom';\n\nimport AddClassModal from '../components/lobbyPage/classAddModal';\nimport LobbyContent from '../components/lobbyPage/lobbyContent';\nimport ClassCard from '../components/lobbyPage/classCard';\nimport Header from '../components/common/Header';\nimport useClasses from '../hooks/useClasses';\nimport { MemberType } from '../types';\nimport LogoAsset from '../assets/logo2.svg';\n\nconst LobbyPage = () => {\n  const col = useBreakpointValue({\n    base: '4',\n    sm: '1',\n    md: '2',\n    lg: '3',\n    xl: '4',\n    '2xl': '5'\n  });\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const { classes, addClass } = useClasses();\n\n  return (\n    <>\n      <Box h=\"80px\" w=\"100%\" bgColor=\"black\">\n        <Image src={LogoAsset} alt=\"liveclass\" h=\"80px\" pl=\"8px\" />\n      </Box>\n\n      <br />\n\n      <Heading size=\"lg\" pl=\"30px\">\n        Teaching Lectures\n      </Heading>\n      <LobbyContent col={col}>\n        {classes\n          .filter(({ memberType }) => memberType === MemberType.INSTRUCTOR)\n          .map(({ uuid, title, subtitle, memberType }) => (\n            <Link to={`/class/${uuid}/${memberType}`} key={uuid}>\n              <ClassCard\n                title={title}\n                subTitle={subtitle}\n                color=\"white\"\n                backgroundColor=\"black\"\n              />\n            </Link>\n          ))}\n      </LobbyContent>\n\n      <br />\n\n      <Heading size=\"lg\" pl=\"30px\">\n        Listening Lectures\n      </Heading>\n      <LobbyContent col={col}>\n        {classes\n          .filter(({ memberType }) => memberType === MemberType.STUDENT)\n          .map(({ uuid, title, subtitle, memberType }) => (\n            <Link to={`/class/${uuid}/${memberType}`} key={uuid}>\n              <ClassCard\n                imgSrc=\"a\"\n                title={title}\n                subTitle={subtitle}\n                color=\"white\"\n                backgroundColor=\"black\"\n              />\n            </Link>\n          ))}\n      </LobbyContent>\n      <IconButton\n        position=\"fixed\"\n        right=\"5%\"\n        bottom=\"10%\"\n        size=\"lg\"\n        aria-label=\"Add Classroom\"\n        colorScheme=\"green\"\n        icon={<AddIcon />}\n        onClick={onOpen}\n      />\n      <AddClassModal onClose={onClose} isOpen={isOpen} addClass={addClass} />\n    </>\n  );\n};\n\nexport default LobbyPage;\n","import React from 'react';\nimport { Heading, Input, FormControl, Stack } from '@chakra-ui/react';\n\n// interface changeEventHandlerProps {\n//   handler: (event: React.ChangeEventHandler<HTMLInputElement>) => void;\n// }\n\nconst LectureTitle = ({ onChangeLecturetitle }: any) => {\n  return (\n    <Stack spacing=\"24px\">\n      <Heading size=\"lg\" pl=\"30px\">\n        Lecture Title\n      </Heading>\n      <FormControl pl=\"30px\">\n        <Input\n          type=\"text\"\n          placeholder=\"Lecture Title\"\n          onChange={evt => onChangeLecturetitle(evt)}\n          w=\"500px\"\n          focusBorderColor=\"black\"\n        />\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport default LectureTitle;\n","import React from 'react';\nimport { Heading, FormControl, Stack, Textarea } from '@chakra-ui/react';\n\nconst LectureNotice = ({ onChangeLectureNotice }: any) => {\n  return (\n    <Stack spacing=\"24px\">\n      <Heading size=\"md\" pl=\"30px\">\n        Notice\n      </Heading>\n      <FormControl pl=\"30px\">\n        <Textarea\n          placeholder=\"Description\"\n          onChange={evt => onChangeLectureNotice(evt)}\n          focusBorderColor=\"black\"\n          w=\"500px\"\n        />\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport default LectureNotice;\n","import React, { useState } from 'react';\nimport { Heading, Input, FormLabel, Stack, HStack } from '@chakra-ui/react';\n\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\ninterface classTimeInput {\n  lectureDate: Date;\n  setLectureDate: (date: Date) => void;\n}\n\nconst LectureTime = ({ lectureDate, setLectureDate }: classTimeInput) => {\n  return (\n    <Stack spacing=\"24px\">\n      <Heading size=\"md\" pl=\"30px\">\n        Lecture Time\n      </Heading>\n      <HStack pl=\"30px\">\n        <DatePicker\n          selected={lectureDate}\n          onChange={(date: Date) => setLectureDate(date)}\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          timeIntervals={15}\n          timeCaption=\"time\"\n          dateFormat=\"yyyy.MM.dd h:mm aa\"\n        />\n      </HStack>\n      {/* {lectureDate} */}\n    </Stack>\n  );\n};\n\nexport default LectureTime;\n","import React from 'react';\nimport { Heading, Text, Stack, HStack, Input, Button } from '@chakra-ui/react';\n\nimport { getPlayListItems } from '../../common/playlist';\n\nconst AddPlayList = ({\n  onChangeLecturePlaylist,\n  Lecturelink,\n  setLecturequizlist\n}: any) => {\n  const Youtubelist = [\n    {\n      id: 1,\n      link: '',\n      title: '',\n      quiztime: '',\n      problem: '',\n      answer: ''\n    }\n  ];\n\n  const onClickAdd = () => {\n    getPlayListItems(Lecturelink).then(data => {\n      data.items.forEach((element: any, idx: number) => {\n        const newquiz = {\n          id: idx,\n          link: element.snippet.resourceId.videoId,\n          title: element.snippet.title,\n          quiztime: ' ',\n          problem: ' ',\n          answer: ' ',\n          mark: 0\n        };\n        Youtubelist.push(newquiz);\n      });\n      setLecturequizlist(Youtubelist);\n    });\n  };\n\n  const onClickRemove = () => {\n    setLecturequizlist([\n      {\n        id: 1,\n        link: ' ',\n        quiztime: ' ',\n        problem: ' ',\n        answer: ' '\n      }\n    ]);\n  };\n  return (\n    <Stack spacing=\"24px\">\n      <Heading size=\"md\" pl=\"30px\">\n        Youtube playlist\n      </Heading>\n      <Text size=\"sm\" pl=\"30px\">\n        Input Youtube playlist.\n        <br />\n        For\n        https://www.youtube.com/playlist?list=PLFt2h1jjxKxwQAQr6Dv5kYP4Uu5cGX1iH\n        <br />\n        Just input PLFt2h1jjxKxwQAQr6Dv5kYP4Uu5cGX1iH\n      </Text>\n      <HStack spacing=\"5px\" pl=\"30px\">\n        <Input\n          placeholder=\"Youtube Material link\"\n          onChange={evt => onChangeLecturePlaylist(evt)}\n          focusBorderColor=\"black\"\n          w=\"500px\"\n        />\n        <Button colorScheme=\"blue\" w={100} onClick={onClickAdd}>\n          Add\n        </Button>\n        <Button colorScheme=\"red\" w={100} onClick={onClickRemove}>\n          Remove All\n        </Button>\n      </HStack>\n    </Stack>\n  );\n};\nexport default AddPlayList;\n","import React from 'react';\nimport {\n  Stack,\n  IconButton,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Box,\n  Input,\n  Button,\n  FormLabel,\n  Textarea\n} from '@chakra-ui/react';\n\nimport { AddIcon } from '@chakra-ui/icons';\n\nconst AddQuizModal = ({\n  id,\n  isAddopen,\n  onAddopen,\n  onAddclose,\n  onChangeLectureproblem,\n  onChangeLectureanswer,\n  onChangeLecturequiztime,\n  Lectureproblem,\n  Lectureanswer,\n  Lecturequiztime,\n  setQurrentnumber,\n  Lecturequizlist,\n  Qurrentnumber,\n  setLecturequizlist\n}: any) => {\n  const onAddopenwithnum = (e: any) => {\n    setQurrentnumber(e.target.id);\n    onAddopen();\n  };\n  const addquiz = () => {\n    const tempquizlist = [...Lecturequizlist];\n    tempquizlist[Qurrentnumber - 1].quiztime = Lecturequiztime;\n    tempquizlist[Qurrentnumber - 1].problem = Lectureproblem;\n    tempquizlist[Qurrentnumber - 1].answer = Lectureanswer;\n    tempquizlist[Qurrentnumber - 1].mark = 1;\n    setLecturequizlist(tempquizlist);\n    onAddclose();\n  };\n  return (\n    <Stack>\n      <IconButton\n        id={id}\n        aria-label=\"Add to friends\"\n        icon={<AddIcon />}\n        onClick={onAddopenwithnum}\n      />\n      <Modal isOpen={isAddopen} onClose={onAddclose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create Quiz</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Stack spacing=\"20px\">\n              <Stack>\n                <Box>Problem Description</Box>\n                <Textarea\n                  placeholder=\"Description\"\n                  onChange={onChangeLectureproblem}\n                  focusBorderColor=\"black\"\n                />\n              </Stack>\n              <Stack>\n                <Box>Answer</Box>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Problem Answer\"\n                  onChange={onChangeLectureanswer}\n                  focusBorderColor=\"black\"\n                />\n              </Stack>\n              <Stack>\n                <Box>Quiz Open Time</Box>\n                <FormLabel>If 07:34 please enter 0734</FormLabel>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Quiz pop up time\"\n                  onChange={onChangeLecturequiztime}\n                  focusBorderColor=\"black\"\n                />\n              </Stack>\n            </Stack>\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={addquiz}>\n              Add\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Stack>\n  );\n};\n\nexport default AddQuizModal;\n","import React, { useState } from 'react';\nimport {\n  IconButton,\n  useDisclosure,\n  Heading,\n  Button,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Center,\n  Stack,\n  Flex,\n  Spacer,\n  useToast\n} from '@chakra-ui/react';\nimport { DeleteIcon, CheckIcon, CloseIcon } from '@chakra-ui/icons';\n\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router-dom';\nimport LectureTitle from './createLecture/lectureTitle';\nimport LectureNotice from './createLecture/lectureNotice';\nimport LectureTime from './createLecture/lectureTime';\nimport AddPlayList from './createLecture/addPlaylist';\nimport AddQuizModal from './createLecture/addQuizModal';\n\nimport { useSocket } from '../../context/socket';\n\nconst AddLecturePage = () => {\n  const {\n    isOpen: isAddopen,\n    onOpen: onAddopen,\n    onClose: onAddclose\n  } = useDisclosure();\n\n  const [lectureDate, setLectureDate] = useState<Date>(new Date());\n\n  const [lectureTitle, setLectureTitle] = useState<string>('');\n  const [lectureNotice, setLectureNotice] = useState<string>('');\n  const [lecturePlaylist, setLecturePlaylist] = useState<string>('');\n\n  const [Lecturequiztime, setLecturequiztime] = useState('');\n  const [Lectureproblem, setLectureproblem] = useState('');\n  const [Lectureanswer, setLectureanswer] = useState('');\n  const [Qurrentnumber, setQurrentnumber] = useState('');\n  const [Lecturequizhead, setLecturequizhead] = useState([\n    {\n      id: 0,\n      playlist: lecturePlaylist,\n      link: 'Lecture Link',\n      title: 'Video Title',\n      quiztime: 'Lecture Quiz Time',\n      problem: 'Lecture Problem',\n      answer: 'Lecture Answer',\n      mark: 0\n    }\n  ]);\n  const [Lecturequizlist, setLecturequizlist] = useState([\n    {\n      id: 1,\n      playlist: lecturePlaylist,\n      link: ' ',\n      title: ' ',\n      quiztime: ' ',\n      problem: ' ',\n      answer: ' ',\n      mark: 0\n    }\n  ]);\n\n  const { socket, connected } = useSocket();\n  const { classUuid } = useParams();\n  const navigate = useNavigate(); // react-router-dom : go back to previous page\n  const toast = useToast();\n\n  const onChangeCreate = () => {\n    // setLecturequizlist(Lecturequizlist.filter((item: any) => item.mark !== 0));\n\n    const payload = JSON.stringify({\n      classUuid,\n      lectureDate,\n      lectureName: lectureTitle,\n      playlist: lecturePlaylist\n    });\n    socket?.emit('CreateLecture', payload);\n    navigate(-1);\n\n    toast({\n      title: 'New lecture created',\n      status: 'success',\n      duration: 1500,\n      isClosable: true\n    });\n  };\n\n  const onChangeLectureTitle = (e: any) => {\n    setLectureTitle(e.target.value);\n  };\n  const onChangeLectureNotice = (e: any) => {\n    setLectureNotice(e.target.value);\n  };\n  const onChangeLectureproblem = (e: any) => {\n    setLectureproblem(e.target.value);\n  };\n  const onChangeLectureanswer = (e: any) => {\n    setLectureanswer(e.target.value);\n  };\n  const onChangeLecturequiztime = (e: any) => {\n    setLecturequiztime(e.target.value);\n  };\n  const onChangeLecturePlaylist = (e: any) => {\n    setLecturePlaylist(e.target.value);\n  };\n  const onClickRemove = (e: any) => {\n    removequiz(e.target.id);\n  };\n  const removequiz = (i: number) => {\n    const tempquizlist = [...Lecturequizlist];\n    tempquizlist[i - 1].quiztime = ' ';\n    tempquizlist[i - 1].problem = ' ';\n    tempquizlist[i - 1].answer = ' ';\n    tempquizlist[i - 1].mark = 0;\n    setLecturequizlist(tempquizlist);\n  };\n  const showQuiz = Lecturequizlist.map((item: any) => {\n    return (\n      <Table variant=\"simple\" size=\"sm\">\n        <Tbody>\n          <Tr align=\"left\">\n            <Th align=\"left\" width=\"5%\">\n              {item.id}\n            </Th>\n            <Th align=\"left\" width=\"15%\">\n              {item.title}\n            </Th>\n            <Th align=\"left\" width=\"10%\">\n              {item.quiztime}\n            </Th>\n            <Th align=\"left\" width=\"15%\">\n              {item.problem}\n            </Th>\n            <Th align=\"left\" width=\"5%\">\n              {item.answer}\n            </Th>\n            <Th align=\"center\" width=\"5%\">\n              <AddQuizModal\n                id={item.id}\n                isAddopen={isAddopen}\n                onAddopen={onAddopen}\n                onAddclose={onAddclose}\n                onChangeLectureproblem={onChangeLectureproblem}\n                onChangeLectureanswer={onChangeLectureanswer}\n                onChangeLecturequiztime={onChangeLecturequiztime}\n                Lectureproblem={Lectureproblem}\n                Lectureanswer={Lectureanswer}\n                Lecturequiztime={Lecturequiztime}\n                setQurrentnumber={setQurrentnumber}\n                Lecturequizlist={Lecturequizlist}\n                Qurrentnumber={Qurrentnumber}\n                setLecturequizlist={setLecturequizlist}\n              />\n            </Th>\n            <Th align=\"center\" width=\"5%\">\n              <IconButton\n                id={item.id}\n                aria-label=\"Add to friends\"\n                icon={<DeleteIcon />}\n                onClick={onClickRemove}\n              />\n            </Th>\n          </Tr>\n        </Tbody>\n      </Table>\n    );\n  });\n  const showQuizhead = Lecturequizhead.map((item: any) => {\n    return (\n      <Table variant=\"simple\">\n        <Thead>\n          <Tr align=\"left\">\n            <Th align=\"left\" width=\"5%\">\n              {item.id}\n            </Th>\n            <Th align=\"left\" width=\"15%\">\n              {item.title}\n            </Th>\n            <Th align=\"left\" width=\"10%\">\n              {item.quiztime}\n            </Th>\n            <Th align=\"left\" width=\"15%\">\n              {item.problem}\n            </Th>\n            <Th align=\"left\" width=\"5%\">\n              {item.answer}\n            </Th>\n            <Th align=\"center\" width=\"5%\">\n              Add\n            </Th>\n            <Th align=\"center\" width=\"5%\">\n              Remove\n            </Th>\n          </Tr>\n        </Thead>\n      </Table>\n    );\n  });\n  return (\n    <>\n      <Stack spacing=\"24px\">\n        <Center bg=\"black\" h=\"100px\" color=\"white\" fontSize=\"2xl\">\n          Create Lecture\n        </Center>\n        <LectureTitle onChangeLecturetitle={onChangeLectureTitle} />\n        <LectureNotice onChangeLectureNotice={onChangeLectureNotice} />\n        <LectureTime\n          lectureDate={lectureDate}\n          setLectureDate={setLectureDate}\n        />\n        <AddPlayList\n          Lecturequizlist={Lecturequizlist}\n          onChangeLecturePlaylist={onChangeLecturePlaylist}\n          Lecturelink={lecturePlaylist}\n          setLecturequizlist={setLecturequizlist}\n        />\n        <Heading size=\"md\" pl=\"30px\">\n          Quiz List\n        </Heading>\n        <ol>{showQuizhead}</ol>\n        <ol>{showQuiz}</ol>\n      </Stack>\n      <br />\n      <br />\n      <br />\n      <Flex>\n        <Spacer />\n        <Button\n          leftIcon={<CheckIcon />}\n          colorScheme=\"blue\"\n          mr={3}\n          w={150}\n          h={50}\n          onClick={onChangeCreate}\n        >\n          Create Lecture\n        </Button>\n        <Button\n          leftIcon={<CloseIcon />}\n          colorScheme=\"red\"\n          mr={50}\n          w={150}\n          h={50}\n          onClick={() => navigate(-1)}\n        >\n          Cancel\n        </Button>\n      </Flex>\n      <br />\n    </>\n  );\n};\n\nexport default AddLecturePage;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport LoginModal from './components/loginModal';\nimport { SocketProvider } from './context/socket';\nimport ClassPage from './pages/classPage';\nimport LecturePage from './pages/lecturePage';\nimport LobbyPage from './pages/lobbyPage';\nimport AddLecturePage from './components/classroomPage/AddLecturePage';\n\nconst App = (): React.ReactElement<any, any> => {\n  return (\n    <div className=\"App\">\n      <SocketProvider url=\"http://localhost:5000/\">\n        <LoginModal />\n        <Router>\n          <Routes>\n            <Route path=\"/\" element={<LobbyPage />} />\n            <Route\n              path=\"class/:classUuid/:memberType\"\n              element={<ClassPage />}\n            />\n            <Route\n              path=\"class/:classUuid/:memberType/createLecture\"\n              element={<AddLecturePage />}\n            />\n            <Route\n              path=\"class/:classUuid/:memberType/:lectureId\"\n              element={<LecturePage />}\n            />\n          </Routes>\n        </Router>\n      </SocketProvider>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\n/* eslint-disable */\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState, useEffect } from 'react';\nimport { UserLoadStatus } from '../../types';\n\nimport UserContext from './userContext';\n\nconst UserProvider = ({ children }: React.PropsWithChildren<unknown>) => {\n  const [userName, setUserName] = useState('');\n  const [status, setUserStatus] = useState(UserLoadStatus.LOADING);\n  const [id, setId] = useState(-1);\n\n  useEffect(() => {\n    if (status === UserLoadStatus.LOADING) {\n      fetch('http://localhost:5000/api/me', {\n        method: 'GET'\n      })\n        .then(r => r.json())\n        .then(r => {\n          if (r.status === 401) {\n            setUserStatus(UserLoadStatus.NOTLOADED);\n          } else if (r.status === 200) {\n            console.log('Logged IN');\n            setUserName(r.userName);\n            setId(r.id);\n            setUserStatus(UserLoadStatus.LOADED);\n          }\n        })\n        .catch(e => console.error(e));\n    }\n  }, []);\n\n  return (\n    <UserContext.Provider value={{ userName, status, id }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport default UserProvider;\n","import React, { useState } from 'react';\nimport lectureContext from './lectureContext';\n\nconst langProvider = ({ children }: React.PropsWithChildren<unknown>) => {\n  const [selectedVidIdx, setSelectedVidIdx] = useState<number>(0);\n  const [isLive, setIsLive] = useState<boolean>(false);\n\n  return (\n    <lectureContext.Provider\n      value={{ isLive, setIsLive, selectedVidIdx, setSelectedVidIdx }}\n    >\n      {children}\n    </lectureContext.Provider>\n  );\n};\n\nexport default langProvider;\n","import React, { useState } from 'react';\nimport langContext from './languageContext';\nimport { LanguageType } from '../../types';\n\nconst langProvider = ({ children }: React.PropsWithChildren<unknown>) => {\n  const [language, setLanguage] = useState<LanguageType>(LanguageType.KO);\n\n  return (\n    <langContext.Provider value={{ language, setLanguage }}>\n      {children}\n    </langContext.Provider>\n  );\n};\n\nexport default langProvider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport UserProvider from './context/user/userProvider';\nimport LectureProvider from './context/lecture/lectureProvider';\nimport LangProvider from './context/language/languageProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <UserProvider>\n        <LectureProvider>\n          <LangProvider>\n            <App />\n          </LangProvider>\n        </LectureProvider>\n      </UserProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}